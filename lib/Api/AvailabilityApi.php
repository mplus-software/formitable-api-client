<?php
/**
 * AvailabilityApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Formitable Api v1.2
 *
 * New in this version: <ul><li>Added Get Single restaurant operation.</li><li>Verify availability for a datetime / partysize.</li><li>Select tables with create and update booking.</li><li>Get tables and areas by the POS identifiers</li></ul>
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * AvailabilityApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AvailabilityApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation availabilityGetAvailabilityForDays
     *
     * Get day availability
     *
     * @param  \DateTime $from The start day (yyyy-mm-dd) (required)
     * @param  int $days The number of days, should be between 1-42 (required)
     * @param  int $number_of_people The number of people that the booking consists of. (required)
     * @param  string $language The language of the information returned. Two letter ISO language code. Currently supported: English (en), Dutch (nl) (required)
     * @param  string $version version (required)
     * @param  string $restaurant_uid restaurant_uid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BookingDatePublicViewModel[]
     */
    public function availabilityGetAvailabilityForDays($from, $days, $number_of_people, $language, $version, $restaurant_uid)
    {
        list($response) = $this->availabilityGetAvailabilityForDaysWithHttpInfo($from, $days, $number_of_people, $language, $version, $restaurant_uid);
        return $response;
    }

    /**
     * Operation availabilityGetAvailabilityForDaysWithHttpInfo
     *
     * Get day availability
     *
     * @param  \DateTime $from The start day (yyyy-mm-dd) (required)
     * @param  int $days The number of days, should be between 1-42 (required)
     * @param  int $number_of_people The number of people that the booking consists of. (required)
     * @param  string $language The language of the information returned. Two letter ISO language code. Currently supported: English (en), Dutch (nl) (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BookingDatePublicViewModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function availabilityGetAvailabilityForDaysWithHttpInfo($from, $days, $number_of_people, $language, $version, $restaurant_uid)
    {
        $returnType = '\Swagger\Client\Model\BookingDatePublicViewModel[]';
        $request = $this->availabilityGetAvailabilityForDaysRequest($from, $days, $number_of_people, $language, $version, $restaurant_uid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BookingDatePublicViewModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation availabilityGetAvailabilityForDaysAsync
     *
     * Get day availability
     *
     * @param  \DateTime $from The start day (yyyy-mm-dd) (required)
     * @param  int $days The number of days, should be between 1-42 (required)
     * @param  int $number_of_people The number of people that the booking consists of. (required)
     * @param  string $language The language of the information returned. Two letter ISO language code. Currently supported: English (en), Dutch (nl) (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function availabilityGetAvailabilityForDaysAsync($from, $days, $number_of_people, $language, $version, $restaurant_uid)
    {
        return $this->availabilityGetAvailabilityForDaysAsyncWithHttpInfo($from, $days, $number_of_people, $language, $version, $restaurant_uid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation availabilityGetAvailabilityForDaysAsyncWithHttpInfo
     *
     * Get day availability
     *
     * @param  \DateTime $from The start day (yyyy-mm-dd) (required)
     * @param  int $days The number of days, should be between 1-42 (required)
     * @param  int $number_of_people The number of people that the booking consists of. (required)
     * @param  string $language The language of the information returned. Two letter ISO language code. Currently supported: English (en), Dutch (nl) (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function availabilityGetAvailabilityForDaysAsyncWithHttpInfo($from, $days, $number_of_people, $language, $version, $restaurant_uid)
    {
        $returnType = '\Swagger\Client\Model\BookingDatePublicViewModel[]';
        $request = $this->availabilityGetAvailabilityForDaysRequest($from, $days, $number_of_people, $language, $version, $restaurant_uid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'availabilityGetAvailabilityForDays'
     *
     * @param  \DateTime $from The start day (yyyy-mm-dd) (required)
     * @param  int $days The number of days, should be between 1-42 (required)
     * @param  int $number_of_people The number of people that the booking consists of. (required)
     * @param  string $language The language of the information returned. Two letter ISO language code. Currently supported: English (en), Dutch (nl) (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function availabilityGetAvailabilityForDaysRequest($from, $days, $number_of_people, $language, $version, $restaurant_uid)
    {
        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling availabilityGetAvailabilityForDays'
            );
        }
        // verify the required parameter 'days' is set
        if ($days === null || (is_array($days) && count($days) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $days when calling availabilityGetAvailabilityForDays'
            );
        }
        // verify the required parameter 'number_of_people' is set
        if ($number_of_people === null || (is_array($number_of_people) && count($number_of_people) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number_of_people when calling availabilityGetAvailabilityForDays'
            );
        }
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling availabilityGetAvailabilityForDays'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling availabilityGetAvailabilityForDays'
            );
        }
        // verify the required parameter 'restaurant_uid' is set
        if ($restaurant_uid === null || (is_array($restaurant_uid) && count($restaurant_uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restaurant_uid when calling availabilityGetAvailabilityForDays'
            );
        }

        $resourcePath = '/api/v{version}/{restaurantUid}/availability/days/{from}/{days}/{numberOfPeople}/{language}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($from !== null) {
            $resourcePath = str_replace(
                '{' . 'from' . '}',
                ObjectSerializer::toPathValue($from),
                $resourcePath
            );
        }
        // path params
        if ($days !== null) {
            $resourcePath = str_replace(
                '{' . 'days' . '}',
                ObjectSerializer::toPathValue($days),
                $resourcePath
            );
        }
        // path params
        if ($number_of_people !== null) {
            $resourcePath = str_replace(
                '{' . 'numberOfPeople' . '}',
                ObjectSerializer::toPathValue($number_of_people),
                $resourcePath
            );
        }
        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($restaurant_uid !== null) {
            $resourcePath = str_replace(
                '{' . 'restaurantUid' . '}',
                ObjectSerializer::toPathValue($restaurant_uid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation availabilityGetAvailabilityForMonth
     *
     * Get month availability
     *
     * @param  int $month The month number (1-12) (required)
     * @param  int $year The year (required)
     * @param  int $number_of_people The number of people that the booking consists of. (required)
     * @param  string $language The language of the information returned. Two letter ISO language code. Currently supported: English (en), Dutch (nl) (required)
     * @param  string $version version (required)
     * @param  string $restaurant_uid restaurant_uid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BookingDatePublicViewModel[]
     */
    public function availabilityGetAvailabilityForMonth($month, $year, $number_of_people, $language, $version, $restaurant_uid)
    {
        list($response) = $this->availabilityGetAvailabilityForMonthWithHttpInfo($month, $year, $number_of_people, $language, $version, $restaurant_uid);
        return $response;
    }

    /**
     * Operation availabilityGetAvailabilityForMonthWithHttpInfo
     *
     * Get month availability
     *
     * @param  int $month The month number (1-12) (required)
     * @param  int $year The year (required)
     * @param  int $number_of_people The number of people that the booking consists of. (required)
     * @param  string $language The language of the information returned. Two letter ISO language code. Currently supported: English (en), Dutch (nl) (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BookingDatePublicViewModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function availabilityGetAvailabilityForMonthWithHttpInfo($month, $year, $number_of_people, $language, $version, $restaurant_uid)
    {
        $returnType = '\Swagger\Client\Model\BookingDatePublicViewModel[]';
        $request = $this->availabilityGetAvailabilityForMonthRequest($month, $year, $number_of_people, $language, $version, $restaurant_uid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BookingDatePublicViewModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation availabilityGetAvailabilityForMonthAsync
     *
     * Get month availability
     *
     * @param  int $month The month number (1-12) (required)
     * @param  int $year The year (required)
     * @param  int $number_of_people The number of people that the booking consists of. (required)
     * @param  string $language The language of the information returned. Two letter ISO language code. Currently supported: English (en), Dutch (nl) (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function availabilityGetAvailabilityForMonthAsync($month, $year, $number_of_people, $language, $version, $restaurant_uid)
    {
        return $this->availabilityGetAvailabilityForMonthAsyncWithHttpInfo($month, $year, $number_of_people, $language, $version, $restaurant_uid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation availabilityGetAvailabilityForMonthAsyncWithHttpInfo
     *
     * Get month availability
     *
     * @param  int $month The month number (1-12) (required)
     * @param  int $year The year (required)
     * @param  int $number_of_people The number of people that the booking consists of. (required)
     * @param  string $language The language of the information returned. Two letter ISO language code. Currently supported: English (en), Dutch (nl) (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function availabilityGetAvailabilityForMonthAsyncWithHttpInfo($month, $year, $number_of_people, $language, $version, $restaurant_uid)
    {
        $returnType = '\Swagger\Client\Model\BookingDatePublicViewModel[]';
        $request = $this->availabilityGetAvailabilityForMonthRequest($month, $year, $number_of_people, $language, $version, $restaurant_uid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'availabilityGetAvailabilityForMonth'
     *
     * @param  int $month The month number (1-12) (required)
     * @param  int $year The year (required)
     * @param  int $number_of_people The number of people that the booking consists of. (required)
     * @param  string $language The language of the information returned. Two letter ISO language code. Currently supported: English (en), Dutch (nl) (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function availabilityGetAvailabilityForMonthRequest($month, $year, $number_of_people, $language, $version, $restaurant_uid)
    {
        // verify the required parameter 'month' is set
        if ($month === null || (is_array($month) && count($month) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $month when calling availabilityGetAvailabilityForMonth'
            );
        }
        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling availabilityGetAvailabilityForMonth'
            );
        }
        // verify the required parameter 'number_of_people' is set
        if ($number_of_people === null || (is_array($number_of_people) && count($number_of_people) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number_of_people when calling availabilityGetAvailabilityForMonth'
            );
        }
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling availabilityGetAvailabilityForMonth'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling availabilityGetAvailabilityForMonth'
            );
        }
        // verify the required parameter 'restaurant_uid' is set
        if ($restaurant_uid === null || (is_array($restaurant_uid) && count($restaurant_uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restaurant_uid when calling availabilityGetAvailabilityForMonth'
            );
        }

        $resourcePath = '/api/v{version}/{restaurantUid}/availability/month/{month}/{year}/{numberOfPeople}/{language}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($month !== null) {
            $resourcePath = str_replace(
                '{' . 'month' . '}',
                ObjectSerializer::toPathValue($month),
                $resourcePath
            );
        }
        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }
        // path params
        if ($number_of_people !== null) {
            $resourcePath = str_replace(
                '{' . 'numberOfPeople' . '}',
                ObjectSerializer::toPathValue($number_of_people),
                $resourcePath
            );
        }
        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($restaurant_uid !== null) {
            $resourcePath = str_replace(
                '{' . 'restaurantUid' . '}',
                ObjectSerializer::toPathValue($restaurant_uid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation availabilityGetFirstDateTime
     *
     * Get first availability
     *
     * @param  int $number_of_people The number of people that the booking consists of. (required)
     * @param  string $language The language of the information returned. Two letter ISO language code. Currently supported: English (en), Dutch (nl) (required)
     * @param  string $version version (required)
     * @param  string $restaurant_uid restaurant_uid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BookingTimePublic
     */
    public function availabilityGetFirstDateTime($number_of_people, $language, $version, $restaurant_uid)
    {
        list($response) = $this->availabilityGetFirstDateTimeWithHttpInfo($number_of_people, $language, $version, $restaurant_uid);
        return $response;
    }

    /**
     * Operation availabilityGetFirstDateTimeWithHttpInfo
     *
     * Get first availability
     *
     * @param  int $number_of_people The number of people that the booking consists of. (required)
     * @param  string $language The language of the information returned. Two letter ISO language code. Currently supported: English (en), Dutch (nl) (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BookingTimePublic, HTTP status code, HTTP response headers (array of strings)
     */
    public function availabilityGetFirstDateTimeWithHttpInfo($number_of_people, $language, $version, $restaurant_uid)
    {
        $returnType = '\Swagger\Client\Model\BookingTimePublic';
        $request = $this->availabilityGetFirstDateTimeRequest($number_of_people, $language, $version, $restaurant_uid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BookingTimePublic',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation availabilityGetFirstDateTimeAsync
     *
     * Get first availability
     *
     * @param  int $number_of_people The number of people that the booking consists of. (required)
     * @param  string $language The language of the information returned. Two letter ISO language code. Currently supported: English (en), Dutch (nl) (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function availabilityGetFirstDateTimeAsync($number_of_people, $language, $version, $restaurant_uid)
    {
        return $this->availabilityGetFirstDateTimeAsyncWithHttpInfo($number_of_people, $language, $version, $restaurant_uid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation availabilityGetFirstDateTimeAsyncWithHttpInfo
     *
     * Get first availability
     *
     * @param  int $number_of_people The number of people that the booking consists of. (required)
     * @param  string $language The language of the information returned. Two letter ISO language code. Currently supported: English (en), Dutch (nl) (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function availabilityGetFirstDateTimeAsyncWithHttpInfo($number_of_people, $language, $version, $restaurant_uid)
    {
        $returnType = '\Swagger\Client\Model\BookingTimePublic';
        $request = $this->availabilityGetFirstDateTimeRequest($number_of_people, $language, $version, $restaurant_uid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'availabilityGetFirstDateTime'
     *
     * @param  int $number_of_people The number of people that the booking consists of. (required)
     * @param  string $language The language of the information returned. Two letter ISO language code. Currently supported: English (en), Dutch (nl) (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function availabilityGetFirstDateTimeRequest($number_of_people, $language, $version, $restaurant_uid)
    {
        // verify the required parameter 'number_of_people' is set
        if ($number_of_people === null || (is_array($number_of_people) && count($number_of_people) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number_of_people when calling availabilityGetFirstDateTime'
            );
        }
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling availabilityGetFirstDateTime'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling availabilityGetFirstDateTime'
            );
        }
        // verify the required parameter 'restaurant_uid' is set
        if ($restaurant_uid === null || (is_array($restaurant_uid) && count($restaurant_uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restaurant_uid when calling availabilityGetFirstDateTime'
            );
        }

        $resourcePath = '/api/v{version}/{restaurantUid}/availability/first/{numberOfPeople}/{language}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($number_of_people !== null) {
            $resourcePath = str_replace(
                '{' . 'numberOfPeople' . '}',
                ObjectSerializer::toPathValue($number_of_people),
                $resourcePath
            );
        }
        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($restaurant_uid !== null) {
            $resourcePath = str_replace(
                '{' . 'restaurantUid' . '}',
                ObjectSerializer::toPathValue($restaurant_uid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation availabilityGetOpenTimesForDay
     *
     * Get open times
     *
     * @param  \DateTime $date The day (yyyy-mm-dd) (required)
     * @param  string $version version (required)
     * @param  string $restaurant_uid restaurant_uid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShiftPublicViewModel[]
     */
    public function availabilityGetOpenTimesForDay($date, $version, $restaurant_uid)
    {
        list($response) = $this->availabilityGetOpenTimesForDayWithHttpInfo($date, $version, $restaurant_uid);
        return $response;
    }

    /**
     * Operation availabilityGetOpenTimesForDayWithHttpInfo
     *
     * Get open times
     *
     * @param  \DateTime $date The day (yyyy-mm-dd) (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShiftPublicViewModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function availabilityGetOpenTimesForDayWithHttpInfo($date, $version, $restaurant_uid)
    {
        $returnType = '\Swagger\Client\Model\ShiftPublicViewModel[]';
        $request = $this->availabilityGetOpenTimesForDayRequest($date, $version, $restaurant_uid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShiftPublicViewModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation availabilityGetOpenTimesForDayAsync
     *
     * Get open times
     *
     * @param  \DateTime $date The day (yyyy-mm-dd) (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function availabilityGetOpenTimesForDayAsync($date, $version, $restaurant_uid)
    {
        return $this->availabilityGetOpenTimesForDayAsyncWithHttpInfo($date, $version, $restaurant_uid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation availabilityGetOpenTimesForDayAsyncWithHttpInfo
     *
     * Get open times
     *
     * @param  \DateTime $date The day (yyyy-mm-dd) (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function availabilityGetOpenTimesForDayAsyncWithHttpInfo($date, $version, $restaurant_uid)
    {
        $returnType = '\Swagger\Client\Model\ShiftPublicViewModel[]';
        $request = $this->availabilityGetOpenTimesForDayRequest($date, $version, $restaurant_uid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'availabilityGetOpenTimesForDay'
     *
     * @param  \DateTime $date The day (yyyy-mm-dd) (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function availabilityGetOpenTimesForDayRequest($date, $version, $restaurant_uid)
    {
        // verify the required parameter 'date' is set
        if ($date === null || (is_array($date) && count($date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date when calling availabilityGetOpenTimesForDay'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling availabilityGetOpenTimesForDay'
            );
        }
        // verify the required parameter 'restaurant_uid' is set
        if ($restaurant_uid === null || (is_array($restaurant_uid) && count($restaurant_uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restaurant_uid when calling availabilityGetOpenTimesForDay'
            );
        }

        $resourcePath = '/api/v{version}/{restaurantUid}/availability/open/{date}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($date !== null) {
            $resourcePath = str_replace(
                '{' . 'date' . '}',
                ObjectSerializer::toPathValue($date),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($restaurant_uid !== null) {
            $resourcePath = str_replace(
                '{' . 'restaurantUid' . '}',
                ObjectSerializer::toPathValue($restaurant_uid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation availabilityGetTimesForDay
     *
     * Get times for a day
     *
     * @param  \DateTime $date The day of the booking (yyyy-mm-dd) (required)
     * @param  int $number_of_people The number of people that the booking consists of. (required)
     * @param  string $language The language of the information returned. Two letter ISO language code. Currently supported: English (en), Dutch (nl) (required)
     * @param  string $version version (required)
     * @param  string $restaurant_uid restaurant_uid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BookingTimePublic[]
     */
    public function availabilityGetTimesForDay($date, $number_of_people, $language, $version, $restaurant_uid)
    {
        list($response) = $this->availabilityGetTimesForDayWithHttpInfo($date, $number_of_people, $language, $version, $restaurant_uid);
        return $response;
    }

    /**
     * Operation availabilityGetTimesForDayWithHttpInfo
     *
     * Get times for a day
     *
     * @param  \DateTime $date The day of the booking (yyyy-mm-dd) (required)
     * @param  int $number_of_people The number of people that the booking consists of. (required)
     * @param  string $language The language of the information returned. Two letter ISO language code. Currently supported: English (en), Dutch (nl) (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BookingTimePublic[], HTTP status code, HTTP response headers (array of strings)
     */
    public function availabilityGetTimesForDayWithHttpInfo($date, $number_of_people, $language, $version, $restaurant_uid)
    {
        $returnType = '\Swagger\Client\Model\BookingTimePublic[]';
        $request = $this->availabilityGetTimesForDayRequest($date, $number_of_people, $language, $version, $restaurant_uid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BookingTimePublic[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation availabilityGetTimesForDayAsync
     *
     * Get times for a day
     *
     * @param  \DateTime $date The day of the booking (yyyy-mm-dd) (required)
     * @param  int $number_of_people The number of people that the booking consists of. (required)
     * @param  string $language The language of the information returned. Two letter ISO language code. Currently supported: English (en), Dutch (nl) (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function availabilityGetTimesForDayAsync($date, $number_of_people, $language, $version, $restaurant_uid)
    {
        return $this->availabilityGetTimesForDayAsyncWithHttpInfo($date, $number_of_people, $language, $version, $restaurant_uid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation availabilityGetTimesForDayAsyncWithHttpInfo
     *
     * Get times for a day
     *
     * @param  \DateTime $date The day of the booking (yyyy-mm-dd) (required)
     * @param  int $number_of_people The number of people that the booking consists of. (required)
     * @param  string $language The language of the information returned. Two letter ISO language code. Currently supported: English (en), Dutch (nl) (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function availabilityGetTimesForDayAsyncWithHttpInfo($date, $number_of_people, $language, $version, $restaurant_uid)
    {
        $returnType = '\Swagger\Client\Model\BookingTimePublic[]';
        $request = $this->availabilityGetTimesForDayRequest($date, $number_of_people, $language, $version, $restaurant_uid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'availabilityGetTimesForDay'
     *
     * @param  \DateTime $date The day of the booking (yyyy-mm-dd) (required)
     * @param  int $number_of_people The number of people that the booking consists of. (required)
     * @param  string $language The language of the information returned. Two letter ISO language code. Currently supported: English (en), Dutch (nl) (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function availabilityGetTimesForDayRequest($date, $number_of_people, $language, $version, $restaurant_uid)
    {
        // verify the required parameter 'date' is set
        if ($date === null || (is_array($date) && count($date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date when calling availabilityGetTimesForDay'
            );
        }
        // verify the required parameter 'number_of_people' is set
        if ($number_of_people === null || (is_array($number_of_people) && count($number_of_people) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number_of_people when calling availabilityGetTimesForDay'
            );
        }
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling availabilityGetTimesForDay'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling availabilityGetTimesForDay'
            );
        }
        // verify the required parameter 'restaurant_uid' is set
        if ($restaurant_uid === null || (is_array($restaurant_uid) && count($restaurant_uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restaurant_uid when calling availabilityGetTimesForDay'
            );
        }

        $resourcePath = '/api/v{version}/{restaurantUid}/availability/day/{date}/{numberOfPeople}/{language}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($date !== null) {
            $resourcePath = str_replace(
                '{' . 'date' . '}',
                ObjectSerializer::toPathValue($date),
                $resourcePath
            );
        }
        // path params
        if ($number_of_people !== null) {
            $resourcePath = str_replace(
                '{' . 'numberOfPeople' . '}',
                ObjectSerializer::toPathValue($number_of_people),
                $resourcePath
            );
        }
        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($restaurant_uid !== null) {
            $resourcePath = str_replace(
                '{' . 'restaurantUid' . '}',
                ObjectSerializer::toPathValue($restaurant_uid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation availabilityIsAvailable
     *
     * Verify availability
     *
     * @param  \DateTime $date_time The date and time of the booking (yyy-mm-ddTHH:mm) (required)
     * @param  int $number_of_people The number of people that the booking consists of (required)
     * @param  string $version version (required)
     * @param  string $restaurant_uid restaurant_uid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function availabilityIsAvailable($date_time, $number_of_people, $version, $restaurant_uid)
    {
        list($response) = $this->availabilityIsAvailableWithHttpInfo($date_time, $number_of_people, $version, $restaurant_uid);
        return $response;
    }

    /**
     * Operation availabilityIsAvailableWithHttpInfo
     *
     * Verify availability
     *
     * @param  \DateTime $date_time The date and time of the booking (yyy-mm-ddTHH:mm) (required)
     * @param  int $number_of_people The number of people that the booking consists of (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function availabilityIsAvailableWithHttpInfo($date_time, $number_of_people, $version, $restaurant_uid)
    {
        $returnType = 'bool';
        $request = $this->availabilityIsAvailableRequest($date_time, $number_of_people, $version, $restaurant_uid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation availabilityIsAvailableAsync
     *
     * Verify availability
     *
     * @param  \DateTime $date_time The date and time of the booking (yyy-mm-ddTHH:mm) (required)
     * @param  int $number_of_people The number of people that the booking consists of (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function availabilityIsAvailableAsync($date_time, $number_of_people, $version, $restaurant_uid)
    {
        return $this->availabilityIsAvailableAsyncWithHttpInfo($date_time, $number_of_people, $version, $restaurant_uid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation availabilityIsAvailableAsyncWithHttpInfo
     *
     * Verify availability
     *
     * @param  \DateTime $date_time The date and time of the booking (yyy-mm-ddTHH:mm) (required)
     * @param  int $number_of_people The number of people that the booking consists of (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function availabilityIsAvailableAsyncWithHttpInfo($date_time, $number_of_people, $version, $restaurant_uid)
    {
        $returnType = 'bool';
        $request = $this->availabilityIsAvailableRequest($date_time, $number_of_people, $version, $restaurant_uid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'availabilityIsAvailable'
     *
     * @param  \DateTime $date_time The date and time of the booking (yyy-mm-ddTHH:mm) (required)
     * @param  int $number_of_people The number of people that the booking consists of (required)
     * @param  string $version (required)
     * @param  string $restaurant_uid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function availabilityIsAvailableRequest($date_time, $number_of_people, $version, $restaurant_uid)
    {
        // verify the required parameter 'date_time' is set
        if ($date_time === null || (is_array($date_time) && count($date_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date_time when calling availabilityIsAvailable'
            );
        }
        // verify the required parameter 'number_of_people' is set
        if ($number_of_people === null || (is_array($number_of_people) && count($number_of_people) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number_of_people when calling availabilityIsAvailable'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling availabilityIsAvailable'
            );
        }
        // verify the required parameter 'restaurant_uid' is set
        if ($restaurant_uid === null || (is_array($restaurant_uid) && count($restaurant_uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restaurant_uid when calling availabilityIsAvailable'
            );
        }

        $resourcePath = '/api/v{version}/{restaurantUid}/availability/available/{dateTime}/{numberOfPeople}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($date_time !== null) {
            $resourcePath = str_replace(
                '{' . 'dateTime' . '}',
                ObjectSerializer::toPathValue($date_time),
                $resourcePath
            );
        }
        // path params
        if ($number_of_people !== null) {
            $resourcePath = str_replace(
                '{' . 'numberOfPeople' . '}',
                ObjectSerializer::toPathValue($number_of_people),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($restaurant_uid !== null) {
            $resourcePath = str_replace(
                '{' . 'restaurantUid' . '}',
                ObjectSerializer::toPathValue($restaurant_uid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
