<?php
/**
 * BookingApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Formitable Api v1.2
 *
 * New in this version: <ul><li>Added Get Single restaurant operation.</li><li>Verify availability for a datetime / partysize.</li><li>Select tables with create and update booking.</li><li>Get tables and areas by the POS identifiers</li></ul>
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.16
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * BookingApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BookingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation bookingCancel
     *
     * Cancel booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version version (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function bookingCancel($restaurant_uid, $uid, $version)
    {
        $this->bookingCancelWithHttpInfo($restaurant_uid, $uid, $version);
    }

    /**
     * Operation bookingCancelWithHttpInfo
     *
     * Cancel booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function bookingCancelWithHttpInfo($restaurant_uid, $uid, $version)
    {
        $returnType = '';
        $request = $this->bookingCancelRequest($restaurant_uid, $uid, $version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation bookingCancelAsync
     *
     * Cancel booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingCancelAsync($restaurant_uid, $uid, $version)
    {
        return $this->bookingCancelAsyncWithHttpInfo($restaurant_uid, $uid, $version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bookingCancelAsyncWithHttpInfo
     *
     * Cancel booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingCancelAsyncWithHttpInfo($restaurant_uid, $uid, $version)
    {
        $returnType = '';
        $request = $this->bookingCancelRequest($restaurant_uid, $uid, $version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bookingCancel'
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bookingCancelRequest($restaurant_uid, $uid, $version)
    {
        // verify the required parameter 'restaurant_uid' is set
        if ($restaurant_uid === null || (is_array($restaurant_uid) && count($restaurant_uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restaurant_uid when calling bookingCancel'
            );
        }
        // verify the required parameter 'uid' is set
        if ($uid === null || (is_array($uid) && count($uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uid when calling bookingCancel'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bookingCancel'
            );
        }

        $resourcePath = '/api/v{version}/{restaurantUid}/booking/{uid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($restaurant_uid !== null) {
            $resourcePath = str_replace(
                '{' . 'restaurantUid' . '}',
                ObjectSerializer::toPathValue($restaurant_uid),
                $resourcePath
            );
        }
        // path params
        if ($uid !== null) {
            $resourcePath = str_replace(
                '{' . 'uid' . '}',
                ObjectSerializer::toPathValue($uid),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bookingCheckIn
     *
     * Check-in booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version version (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BookingViewModel
     */
    public function bookingCheckIn($restaurant_uid, $uid, $version)
    {
        list($response) = $this->bookingCheckInWithHttpInfo($restaurant_uid, $uid, $version);
        return $response;
    }

    /**
     * Operation bookingCheckInWithHttpInfo
     *
     * Check-in booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BookingViewModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function bookingCheckInWithHttpInfo($restaurant_uid, $uid, $version)
    {
        $returnType = '\Swagger\Client\Model\BookingViewModel';
        $request = $this->bookingCheckInRequest($restaurant_uid, $uid, $version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BookingViewModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bookingCheckInAsync
     *
     * Check-in booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingCheckInAsync($restaurant_uid, $uid, $version)
    {
        return $this->bookingCheckInAsyncWithHttpInfo($restaurant_uid, $uid, $version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bookingCheckInAsyncWithHttpInfo
     *
     * Check-in booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingCheckInAsyncWithHttpInfo($restaurant_uid, $uid, $version)
    {
        $returnType = '\Swagger\Client\Model\BookingViewModel';
        $request = $this->bookingCheckInRequest($restaurant_uid, $uid, $version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bookingCheckIn'
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bookingCheckInRequest($restaurant_uid, $uid, $version)
    {
        // verify the required parameter 'restaurant_uid' is set
        if ($restaurant_uid === null || (is_array($restaurant_uid) && count($restaurant_uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restaurant_uid when calling bookingCheckIn'
            );
        }
        // verify the required parameter 'uid' is set
        if ($uid === null || (is_array($uid) && count($uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uid when calling bookingCheckIn'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bookingCheckIn'
            );
        }

        $resourcePath = '/api/v{version}/{restaurantUid}/booking/checkin/{uid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($restaurant_uid !== null) {
            $resourcePath = str_replace(
                '{' . 'restaurantUid' . '}',
                ObjectSerializer::toPathValue($restaurant_uid),
                $resourcePath
            );
        }
        // path params
        if ($uid !== null) {
            $resourcePath = str_replace(
                '{' . 'uid' . '}',
                ObjectSerializer::toPathValue($uid),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bookingCheckOut
     *
     * Check-out booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version version (required)
     * @param  \Swagger\Client\Model\PosOrderData $body Optional order info from POS. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BookingViewModel
     */
    public function bookingCheckOut($restaurant_uid, $uid, $version, $body = null)
    {
        list($response) = $this->bookingCheckOutWithHttpInfo($restaurant_uid, $uid, $version, $body);
        return $response;
    }

    /**
     * Operation bookingCheckOutWithHttpInfo
     *
     * Check-out booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     * @param  \Swagger\Client\Model\PosOrderData $body Optional order info from POS. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BookingViewModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function bookingCheckOutWithHttpInfo($restaurant_uid, $uid, $version, $body = null)
    {
        $returnType = '\Swagger\Client\Model\BookingViewModel';
        $request = $this->bookingCheckOutRequest($restaurant_uid, $uid, $version, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BookingViewModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bookingCheckOutAsync
     *
     * Check-out booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     * @param  \Swagger\Client\Model\PosOrderData $body Optional order info from POS. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingCheckOutAsync($restaurant_uid, $uid, $version, $body = null)
    {
        return $this->bookingCheckOutAsyncWithHttpInfo($restaurant_uid, $uid, $version, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bookingCheckOutAsyncWithHttpInfo
     *
     * Check-out booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     * @param  \Swagger\Client\Model\PosOrderData $body Optional order info from POS. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingCheckOutAsyncWithHttpInfo($restaurant_uid, $uid, $version, $body = null)
    {
        $returnType = '\Swagger\Client\Model\BookingViewModel';
        $request = $this->bookingCheckOutRequest($restaurant_uid, $uid, $version, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bookingCheckOut'
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     * @param  \Swagger\Client\Model\PosOrderData $body Optional order info from POS. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bookingCheckOutRequest($restaurant_uid, $uid, $version, $body = null)
    {
        // verify the required parameter 'restaurant_uid' is set
        if ($restaurant_uid === null || (is_array($restaurant_uid) && count($restaurant_uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restaurant_uid when calling bookingCheckOut'
            );
        }
        // verify the required parameter 'uid' is set
        if ($uid === null || (is_array($uid) && count($uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uid when calling bookingCheckOut'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bookingCheckOut'
            );
        }

        $resourcePath = '/api/v{version}/{restaurantUid}/booking/checkout/{uid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($restaurant_uid !== null) {
            $resourcePath = str_replace(
                '{' . 'restaurantUid' . '}',
                ObjectSerializer::toPathValue($restaurant_uid),
                $resourcePath
            );
        }
        // path params
        if ($uid !== null) {
            $resourcePath = str_replace(
                '{' . 'uid' . '}',
                ObjectSerializer::toPathValue($uid),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bookingCreate
     *
     * Create booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $version version (required)
     * @param  \Swagger\Client\Model\BookingCreateViewModel $body The information of the restaurant. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BookingViewModel
     */
    public function bookingCreate($restaurant_uid, $version, $body = null)
    {
        list($response) = $this->bookingCreateWithHttpInfo($restaurant_uid, $version, $body);
        return $response;
    }

    /**
     * Operation bookingCreateWithHttpInfo
     *
     * Create booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $version (required)
     * @param  \Swagger\Client\Model\BookingCreateViewModel $body The information of the restaurant. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BookingViewModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function bookingCreateWithHttpInfo($restaurant_uid, $version, $body = null)
    {
        $returnType = '\Swagger\Client\Model\BookingViewModel';
        $request = $this->bookingCreateRequest($restaurant_uid, $version, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BookingViewModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bookingCreateAsync
     *
     * Create booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $version (required)
     * @param  \Swagger\Client\Model\BookingCreateViewModel $body The information of the restaurant. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingCreateAsync($restaurant_uid, $version, $body = null)
    {
        return $this->bookingCreateAsyncWithHttpInfo($restaurant_uid, $version, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bookingCreateAsyncWithHttpInfo
     *
     * Create booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $version (required)
     * @param  \Swagger\Client\Model\BookingCreateViewModel $body The information of the restaurant. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingCreateAsyncWithHttpInfo($restaurant_uid, $version, $body = null)
    {
        $returnType = '\Swagger\Client\Model\BookingViewModel';
        $request = $this->bookingCreateRequest($restaurant_uid, $version, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bookingCreate'
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $version (required)
     * @param  \Swagger\Client\Model\BookingCreateViewModel $body The information of the restaurant. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bookingCreateRequest($restaurant_uid, $version, $body = null)
    {
        // verify the required parameter 'restaurant_uid' is set
        if ($restaurant_uid === null || (is_array($restaurant_uid) && count($restaurant_uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restaurant_uid when calling bookingCreate'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bookingCreate'
            );
        }

        $resourcePath = '/api/v{version}/{restaurantUid}/booking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($restaurant_uid !== null) {
            $resourcePath = str_replace(
                '{' . 'restaurantUid' . '}',
                ObjectSerializer::toPathValue($restaurant_uid),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bookingCreateMessage
     *
     * Create user message
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version version (required)
     * @param  \Swagger\Client\Model\MessageCreateViewModel $body The message the user wants to send. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\MessageViewModel
     */
    public function bookingCreateMessage($restaurant_uid, $uid, $version, $body = null)
    {
        list($response) = $this->bookingCreateMessageWithHttpInfo($restaurant_uid, $uid, $version, $body);
        return $response;
    }

    /**
     * Operation bookingCreateMessageWithHttpInfo
     *
     * Create user message
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     * @param  \Swagger\Client\Model\MessageCreateViewModel $body The message the user wants to send. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MessageViewModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function bookingCreateMessageWithHttpInfo($restaurant_uid, $uid, $version, $body = null)
    {
        $returnType = '\Swagger\Client\Model\MessageViewModel';
        $request = $this->bookingCreateMessageRequest($restaurant_uid, $uid, $version, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MessageViewModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bookingCreateMessageAsync
     *
     * Create user message
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     * @param  \Swagger\Client\Model\MessageCreateViewModel $body The message the user wants to send. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingCreateMessageAsync($restaurant_uid, $uid, $version, $body = null)
    {
        return $this->bookingCreateMessageAsyncWithHttpInfo($restaurant_uid, $uid, $version, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bookingCreateMessageAsyncWithHttpInfo
     *
     * Create user message
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     * @param  \Swagger\Client\Model\MessageCreateViewModel $body The message the user wants to send. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingCreateMessageAsyncWithHttpInfo($restaurant_uid, $uid, $version, $body = null)
    {
        $returnType = '\Swagger\Client\Model\MessageViewModel';
        $request = $this->bookingCreateMessageRequest($restaurant_uid, $uid, $version, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bookingCreateMessage'
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     * @param  \Swagger\Client\Model\MessageCreateViewModel $body The message the user wants to send. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bookingCreateMessageRequest($restaurant_uid, $uid, $version, $body = null)
    {
        // verify the required parameter 'restaurant_uid' is set
        if ($restaurant_uid === null || (is_array($restaurant_uid) && count($restaurant_uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restaurant_uid when calling bookingCreateMessage'
            );
        }
        // verify the required parameter 'uid' is set
        if ($uid === null || (is_array($uid) && count($uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uid when calling bookingCreateMessage'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bookingCreateMessage'
            );
        }

        $resourcePath = '/api/v{version}/{restaurantUid}/booking/{uid}/message';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($restaurant_uid !== null) {
            $resourcePath = str_replace(
                '{' . 'restaurantUid' . '}',
                ObjectSerializer::toPathValue($restaurant_uid),
                $resourcePath
            );
        }
        // path params
        if ($uid !== null) {
            $resourcePath = str_replace(
                '{' . 'uid' . '}',
                ObjectSerializer::toPathValue($uid),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bookingCreateMessageToUser
     *
     * Create restaurant message
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version version (required)
     * @param  \Swagger\Client\Model\MessageCreateViewModel $body The message you want to send to the user. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\MessageViewModel
     */
    public function bookingCreateMessageToUser($restaurant_uid, $uid, $version, $body = null)
    {
        list($response) = $this->bookingCreateMessageToUserWithHttpInfo($restaurant_uid, $uid, $version, $body);
        return $response;
    }

    /**
     * Operation bookingCreateMessageToUserWithHttpInfo
     *
     * Create restaurant message
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     * @param  \Swagger\Client\Model\MessageCreateViewModel $body The message you want to send to the user. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MessageViewModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function bookingCreateMessageToUserWithHttpInfo($restaurant_uid, $uid, $version, $body = null)
    {
        $returnType = '\Swagger\Client\Model\MessageViewModel';
        $request = $this->bookingCreateMessageToUserRequest($restaurant_uid, $uid, $version, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MessageViewModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bookingCreateMessageToUserAsync
     *
     * Create restaurant message
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     * @param  \Swagger\Client\Model\MessageCreateViewModel $body The message you want to send to the user. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingCreateMessageToUserAsync($restaurant_uid, $uid, $version, $body = null)
    {
        return $this->bookingCreateMessageToUserAsyncWithHttpInfo($restaurant_uid, $uid, $version, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bookingCreateMessageToUserAsyncWithHttpInfo
     *
     * Create restaurant message
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     * @param  \Swagger\Client\Model\MessageCreateViewModel $body The message you want to send to the user. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingCreateMessageToUserAsyncWithHttpInfo($restaurant_uid, $uid, $version, $body = null)
    {
        $returnType = '\Swagger\Client\Model\MessageViewModel';
        $request = $this->bookingCreateMessageToUserRequest($restaurant_uid, $uid, $version, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bookingCreateMessageToUser'
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     * @param  \Swagger\Client\Model\MessageCreateViewModel $body The message you want to send to the user. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bookingCreateMessageToUserRequest($restaurant_uid, $uid, $version, $body = null)
    {
        // verify the required parameter 'restaurant_uid' is set
        if ($restaurant_uid === null || (is_array($restaurant_uid) && count($restaurant_uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restaurant_uid when calling bookingCreateMessageToUser'
            );
        }
        // verify the required parameter 'uid' is set
        if ($uid === null || (is_array($uid) && count($uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uid when calling bookingCreateMessageToUser'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bookingCreateMessageToUser'
            );
        }

        $resourcePath = '/api/v{version}/{restaurantUid}/booking/{uid}/messagetouser';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($restaurant_uid !== null) {
            $resourcePath = str_replace(
                '{' . 'restaurantUid' . '}',
                ObjectSerializer::toPathValue($restaurant_uid),
                $resourcePath
            );
        }
        // path params
        if ($uid !== null) {
            $resourcePath = str_replace(
                '{' . 'uid' . '}',
                ObjectSerializer::toPathValue($uid),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bookingGetBookingByExternalReferenceId
     *
     * Get a booking using the external source and reference ID.
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $source The name of the external system. (required)
     * @param  string $external_reference_id The identifier of the booking in the external system. (required)
     * @param  string $version version (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BookingViewModel
     */
    public function bookingGetBookingByExternalReferenceId($restaurant_uid, $source, $external_reference_id, $version)
    {
        list($response) = $this->bookingGetBookingByExternalReferenceIdWithHttpInfo($restaurant_uid, $source, $external_reference_id, $version);
        return $response;
    }

    /**
     * Operation bookingGetBookingByExternalReferenceIdWithHttpInfo
     *
     * Get a booking using the external source and reference ID.
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $source The name of the external system. (required)
     * @param  string $external_reference_id The identifier of the booking in the external system. (required)
     * @param  string $version (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BookingViewModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function bookingGetBookingByExternalReferenceIdWithHttpInfo($restaurant_uid, $source, $external_reference_id, $version)
    {
        $returnType = '\Swagger\Client\Model\BookingViewModel';
        $request = $this->bookingGetBookingByExternalReferenceIdRequest($restaurant_uid, $source, $external_reference_id, $version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BookingViewModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bookingGetBookingByExternalReferenceIdAsync
     *
     * Get a booking using the external source and reference ID.
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $source The name of the external system. (required)
     * @param  string $external_reference_id The identifier of the booking in the external system. (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingGetBookingByExternalReferenceIdAsync($restaurant_uid, $source, $external_reference_id, $version)
    {
        return $this->bookingGetBookingByExternalReferenceIdAsyncWithHttpInfo($restaurant_uid, $source, $external_reference_id, $version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bookingGetBookingByExternalReferenceIdAsyncWithHttpInfo
     *
     * Get a booking using the external source and reference ID.
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $source The name of the external system. (required)
     * @param  string $external_reference_id The identifier of the booking in the external system. (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingGetBookingByExternalReferenceIdAsyncWithHttpInfo($restaurant_uid, $source, $external_reference_id, $version)
    {
        $returnType = '\Swagger\Client\Model\BookingViewModel';
        $request = $this->bookingGetBookingByExternalReferenceIdRequest($restaurant_uid, $source, $external_reference_id, $version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bookingGetBookingByExternalReferenceId'
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $source The name of the external system. (required)
     * @param  string $external_reference_id The identifier of the booking in the external system. (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bookingGetBookingByExternalReferenceIdRequest($restaurant_uid, $source, $external_reference_id, $version)
    {
        // verify the required parameter 'restaurant_uid' is set
        if ($restaurant_uid === null || (is_array($restaurant_uid) && count($restaurant_uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restaurant_uid when calling bookingGetBookingByExternalReferenceId'
            );
        }
        // verify the required parameter 'source' is set
        if ($source === null || (is_array($source) && count($source) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $source when calling bookingGetBookingByExternalReferenceId'
            );
        }
        // verify the required parameter 'external_reference_id' is set
        if ($external_reference_id === null || (is_array($external_reference_id) && count($external_reference_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $external_reference_id when calling bookingGetBookingByExternalReferenceId'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bookingGetBookingByExternalReferenceId'
            );
        }

        $resourcePath = '/api/v{version}/{restaurantUid}/booking/external/{source}/{externalReferenceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($restaurant_uid !== null) {
            $resourcePath = str_replace(
                '{' . 'restaurantUid' . '}',
                ObjectSerializer::toPathValue($restaurant_uid),
                $resourcePath
            );
        }
        // path params
        if ($source !== null) {
            $resourcePath = str_replace(
                '{' . 'source' . '}',
                ObjectSerializer::toPathValue($source),
                $resourcePath
            );
        }
        // path params
        if ($external_reference_id !== null) {
            $resourcePath = str_replace(
                '{' . 'externalReferenceId' . '}',
                ObjectSerializer::toPathValue($external_reference_id),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bookingGetByUid
     *
     * Get booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version version (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BookingViewModel
     */
    public function bookingGetByUid($restaurant_uid, $uid, $version)
    {
        list($response) = $this->bookingGetByUidWithHttpInfo($restaurant_uid, $uid, $version);
        return $response;
    }

    /**
     * Operation bookingGetByUidWithHttpInfo
     *
     * Get booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BookingViewModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function bookingGetByUidWithHttpInfo($restaurant_uid, $uid, $version)
    {
        $returnType = '\Swagger\Client\Model\BookingViewModel';
        $request = $this->bookingGetByUidRequest($restaurant_uid, $uid, $version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BookingViewModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bookingGetByUidAsync
     *
     * Get booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingGetByUidAsync($restaurant_uid, $uid, $version)
    {
        return $this->bookingGetByUidAsyncWithHttpInfo($restaurant_uid, $uid, $version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bookingGetByUidAsyncWithHttpInfo
     *
     * Get booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingGetByUidAsyncWithHttpInfo($restaurant_uid, $uid, $version)
    {
        $returnType = '\Swagger\Client\Model\BookingViewModel';
        $request = $this->bookingGetByUidRequest($restaurant_uid, $uid, $version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bookingGetByUid'
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bookingGetByUidRequest($restaurant_uid, $uid, $version)
    {
        // verify the required parameter 'restaurant_uid' is set
        if ($restaurant_uid === null || (is_array($restaurant_uid) && count($restaurant_uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restaurant_uid when calling bookingGetByUid'
            );
        }
        // verify the required parameter 'uid' is set
        if ($uid === null || (is_array($uid) && count($uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uid when calling bookingGetByUid'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bookingGetByUid'
            );
        }

        $resourcePath = '/api/v{version}/{restaurantUid}/booking/{uid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($restaurant_uid !== null) {
            $resourcePath = str_replace(
                '{' . 'restaurantUid' . '}',
                ObjectSerializer::toPathValue($restaurant_uid),
                $resourcePath
            );
        }
        // path params
        if ($uid !== null) {
            $resourcePath = str_replace(
                '{' . 'uid' . '}',
                ObjectSerializer::toPathValue($uid),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bookingGetFutureBookings
     *
     * Get future bookings
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  \DateTime $from The first day of the selected period (yyyy-mm-dd). Should be equal or later than today. (required)
     * @param  int $days The number of days of the period, should be between 1-31 (required)
     * @param  string $version version (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BookingViewModel[]
     */
    public function bookingGetFutureBookings($restaurant_uid, $from, $days, $version)
    {
        list($response) = $this->bookingGetFutureBookingsWithHttpInfo($restaurant_uid, $from, $days, $version);
        return $response;
    }

    /**
     * Operation bookingGetFutureBookingsWithHttpInfo
     *
     * Get future bookings
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  \DateTime $from The first day of the selected period (yyyy-mm-dd). Should be equal or later than today. (required)
     * @param  int $days The number of days of the period, should be between 1-31 (required)
     * @param  string $version (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BookingViewModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function bookingGetFutureBookingsWithHttpInfo($restaurant_uid, $from, $days, $version)
    {
        $returnType = '\Swagger\Client\Model\BookingViewModel[]';
        $request = $this->bookingGetFutureBookingsRequest($restaurant_uid, $from, $days, $version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BookingViewModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bookingGetFutureBookingsAsync
     *
     * Get future bookings
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  \DateTime $from The first day of the selected period (yyyy-mm-dd). Should be equal or later than today. (required)
     * @param  int $days The number of days of the period, should be between 1-31 (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingGetFutureBookingsAsync($restaurant_uid, $from, $days, $version)
    {
        return $this->bookingGetFutureBookingsAsyncWithHttpInfo($restaurant_uid, $from, $days, $version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bookingGetFutureBookingsAsyncWithHttpInfo
     *
     * Get future bookings
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  \DateTime $from The first day of the selected period (yyyy-mm-dd). Should be equal or later than today. (required)
     * @param  int $days The number of days of the period, should be between 1-31 (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingGetFutureBookingsAsyncWithHttpInfo($restaurant_uid, $from, $days, $version)
    {
        $returnType = '\Swagger\Client\Model\BookingViewModel[]';
        $request = $this->bookingGetFutureBookingsRequest($restaurant_uid, $from, $days, $version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bookingGetFutureBookings'
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  \DateTime $from The first day of the selected period (yyyy-mm-dd). Should be equal or later than today. (required)
     * @param  int $days The number of days of the period, should be between 1-31 (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bookingGetFutureBookingsRequest($restaurant_uid, $from, $days, $version)
    {
        // verify the required parameter 'restaurant_uid' is set
        if ($restaurant_uid === null || (is_array($restaurant_uid) && count($restaurant_uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restaurant_uid when calling bookingGetFutureBookings'
            );
        }
        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling bookingGetFutureBookings'
            );
        }
        // verify the required parameter 'days' is set
        if ($days === null || (is_array($days) && count($days) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $days when calling bookingGetFutureBookings'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bookingGetFutureBookings'
            );
        }

        $resourcePath = '/api/v{version}/{restaurantUid}/booking/{from}/{days}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($restaurant_uid !== null) {
            $resourcePath = str_replace(
                '{' . 'restaurantUid' . '}',
                ObjectSerializer::toPathValue($restaurant_uid),
                $resourcePath
            );
        }
        // path params
        if ($from !== null) {
            $resourcePath = str_replace(
                '{' . 'from' . '}',
                ObjectSerializer::toPathValue($from),
                $resourcePath
            );
        }
        // path params
        if ($days !== null) {
            $resourcePath = str_replace(
                '{' . 'days' . '}',
                ObjectSerializer::toPathValue($days),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bookingGetMessages
     *
     * Get messages of booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version version (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\MessageViewModel[]
     */
    public function bookingGetMessages($restaurant_uid, $uid, $version)
    {
        list($response) = $this->bookingGetMessagesWithHttpInfo($restaurant_uid, $uid, $version);
        return $response;
    }

    /**
     * Operation bookingGetMessagesWithHttpInfo
     *
     * Get messages of booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MessageViewModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function bookingGetMessagesWithHttpInfo($restaurant_uid, $uid, $version)
    {
        $returnType = '\Swagger\Client\Model\MessageViewModel[]';
        $request = $this->bookingGetMessagesRequest($restaurant_uid, $uid, $version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MessageViewModel[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bookingGetMessagesAsync
     *
     * Get messages of booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingGetMessagesAsync($restaurant_uid, $uid, $version)
    {
        return $this->bookingGetMessagesAsyncWithHttpInfo($restaurant_uid, $uid, $version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bookingGetMessagesAsyncWithHttpInfo
     *
     * Get messages of booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingGetMessagesAsyncWithHttpInfo($restaurant_uid, $uid, $version)
    {
        $returnType = '\Swagger\Client\Model\MessageViewModel[]';
        $request = $this->bookingGetMessagesRequest($restaurant_uid, $uid, $version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bookingGetMessages'
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bookingGetMessagesRequest($restaurant_uid, $uid, $version)
    {
        // verify the required parameter 'restaurant_uid' is set
        if ($restaurant_uid === null || (is_array($restaurant_uid) && count($restaurant_uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restaurant_uid when calling bookingGetMessages'
            );
        }
        // verify the required parameter 'uid' is set
        if ($uid === null || (is_array($uid) && count($uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uid when calling bookingGetMessages'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bookingGetMessages'
            );
        }

        $resourcePath = '/api/v{version}/{restaurantUid}/booking/{uid}/message';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($restaurant_uid !== null) {
            $resourcePath = str_replace(
                '{' . 'restaurantUid' . '}',
                ObjectSerializer::toPathValue($restaurant_uid),
                $resourcePath
            );
        }
        // path params
        if ($uid !== null) {
            $resourcePath = str_replace(
                '{' . 'uid' . '}',
                ObjectSerializer::toPathValue($uid),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation bookingUpdate
     *
     * Update booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version version (required)
     * @param  \Swagger\Client\Model\BookingUpdateViewModel $body The new details of the booking. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BookingViewModel
     */
    public function bookingUpdate($restaurant_uid, $uid, $version, $body = null)
    {
        list($response) = $this->bookingUpdateWithHttpInfo($restaurant_uid, $uid, $version, $body);
        return $response;
    }

    /**
     * Operation bookingUpdateWithHttpInfo
     *
     * Update booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     * @param  \Swagger\Client\Model\BookingUpdateViewModel $body The new details of the booking. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BookingViewModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function bookingUpdateWithHttpInfo($restaurant_uid, $uid, $version, $body = null)
    {
        $returnType = '\Swagger\Client\Model\BookingViewModel';
        $request = $this->bookingUpdateRequest($restaurant_uid, $uid, $version, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BookingViewModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation bookingUpdateAsync
     *
     * Update booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     * @param  \Swagger\Client\Model\BookingUpdateViewModel $body The new details of the booking. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingUpdateAsync($restaurant_uid, $uid, $version, $body = null)
    {
        return $this->bookingUpdateAsyncWithHttpInfo($restaurant_uid, $uid, $version, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation bookingUpdateAsyncWithHttpInfo
     *
     * Update booking
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     * @param  \Swagger\Client\Model\BookingUpdateViewModel $body The new details of the booking. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function bookingUpdateAsyncWithHttpInfo($restaurant_uid, $uid, $version, $body = null)
    {
        $returnType = '\Swagger\Client\Model\BookingViewModel';
        $request = $this->bookingUpdateRequest($restaurant_uid, $uid, $version, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'bookingUpdate'
     *
     * @param  string $restaurant_uid The unique identifier of the restaurant. (required)
     * @param  string $uid The unique identifier of the booking. (required)
     * @param  string $version (required)
     * @param  \Swagger\Client\Model\BookingUpdateViewModel $body The new details of the booking. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function bookingUpdateRequest($restaurant_uid, $uid, $version, $body = null)
    {
        // verify the required parameter 'restaurant_uid' is set
        if ($restaurant_uid === null || (is_array($restaurant_uid) && count($restaurant_uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restaurant_uid when calling bookingUpdate'
            );
        }
        // verify the required parameter 'uid' is set
        if ($uid === null || (is_array($uid) && count($uid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uid when calling bookingUpdate'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling bookingUpdate'
            );
        }

        $resourcePath = '/api/v{version}/{restaurantUid}/booking/{uid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($restaurant_uid !== null) {
            $resourcePath = str_replace(
                '{' . 'restaurantUid' . '}',
                ObjectSerializer::toPathValue($restaurant_uid),
                $resourcePath
            );
        }
        // path params
        if ($uid !== null) {
            $resourcePath = str_replace(
                '{' . 'uid' . '}',
                ObjectSerializer::toPathValue($uid),
                $resourcePath
            );
        }
        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json', 'text/json'],
                ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
