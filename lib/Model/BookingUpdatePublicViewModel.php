<?php
/**
 * BookingUpdatePublicViewModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Formitable Api v1.2
 *
 * New in this version: <ul><li>Added Get Single restaurant operation.</li><li>Verify availability for a datetime / partysize.</li><li>Select tables with create and update booking.</li><li>Get tables and areas by the POS identifiers</li></ul>
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BookingUpdatePublicViewModel Class Doc Comment
 *
 * @category Class
 * @description Model to update a booking
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BookingUpdatePublicViewModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BookingUpdatePublicViewModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tables' => 'int[]',
'color' => 'string',
'booking_date_time' => '\DateTime',
'booking_duration' => 'int',
'number_of_people' => 'int',
'company_name' => 'string',
'title' => 'string',
'first_name' => 'string',
'last_name' => 'string',
'telephone' => 'string',
'email' => 'string',
'comments' => 'string',
'culture' => 'string',
'company' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tables' => 'int32',
'color' => null,
'booking_date_time' => 'date-time',
'booking_duration' => 'int32',
'number_of_people' => 'int32',
'company_name' => null,
'title' => null,
'first_name' => null,
'last_name' => null,
'telephone' => null,
'email' => null,
'comments' => null,
'culture' => null,
'company' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tables' => 'tables',
'color' => 'color',
'booking_date_time' => 'bookingDateTime',
'booking_duration' => 'bookingDuration',
'number_of_people' => 'numberOfPeople',
'company_name' => 'companyName',
'title' => 'title',
'first_name' => 'firstName',
'last_name' => 'lastName',
'telephone' => 'telephone',
'email' => 'email',
'comments' => 'comments',
'culture' => 'culture',
'company' => 'company'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tables' => 'setTables',
'color' => 'setColor',
'booking_date_time' => 'setBookingDateTime',
'booking_duration' => 'setBookingDuration',
'number_of_people' => 'setNumberOfPeople',
'company_name' => 'setCompanyName',
'title' => 'setTitle',
'first_name' => 'setFirstName',
'last_name' => 'setLastName',
'telephone' => 'setTelephone',
'email' => 'setEmail',
'comments' => 'setComments',
'culture' => 'setCulture',
'company' => 'setCompany'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tables' => 'getTables',
'color' => 'getColor',
'booking_date_time' => 'getBookingDateTime',
'booking_duration' => 'getBookingDuration',
'number_of_people' => 'getNumberOfPeople',
'company_name' => 'getCompanyName',
'title' => 'getTitle',
'first_name' => 'getFirstName',
'last_name' => 'getLastName',
'telephone' => 'getTelephone',
'email' => 'getEmail',
'comments' => 'getComments',
'culture' => 'getCulture',
'company' => 'getCompany'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tables'] = isset($data['tables']) ? $data['tables'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['booking_date_time'] = isset($data['booking_date_time']) ? $data['booking_date_time'] : null;
        $this->container['booking_duration'] = isset($data['booking_duration']) ? $data['booking_duration'] : null;
        $this->container['number_of_people'] = isset($data['number_of_people']) ? $data['number_of_people'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['culture'] = isset($data['culture']) ? $data['culture'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tables
     *
     * @return int[]
     */
    public function getTables()
    {
        return $this->container['tables'];
    }

    /**
     * Sets tables
     *
     * @param int[] $tables The table id's for this booking to be placed on. By passing an empty array system will find optimal table combination. If ommited, tables will not be changed. Possible conflicts will appear in warnings property of response.
     *
     * @return $this
     */
    public function setTables($tables)
    {
        $this->container['tables'] = $tables;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color The color for this booking, only visible for the restaurant. Possible values: #3edca8 - green, #00d0f1 - azure, #b58dff - purple, #ff8da6 - pink, #ff3800 - red, #ffd100 - yellow
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets booking_date_time
     *
     * @return \DateTime
     */
    public function getBookingDateTime()
    {
        return $this->container['booking_date_time'];
    }

    /**
     * Sets booking_date_time
     *
     * @param \DateTime $booking_date_time The date and time of the booking.
     *
     * @return $this
     */
    public function setBookingDateTime($booking_date_time)
    {
        $this->container['booking_date_time'] = $booking_date_time;

        return $this;
    }

    /**
     * Gets booking_duration
     *
     * @return int
     */
    public function getBookingDuration()
    {
        return $this->container['booking_duration'];
    }

    /**
     * Sets booking_duration
     *
     * @param int $booking_duration The duration of the booking in minutes. Leave null for the standard booking duration.
     *
     * @return $this
     */
    public function setBookingDuration($booking_duration)
    {
        $this->container['booking_duration'] = $booking_duration;

        return $this;
    }

    /**
     * Gets number_of_people
     *
     * @return int
     */
    public function getNumberOfPeople()
    {
        return $this->container['number_of_people'];
    }

    /**
     * Sets number_of_people
     *
     * @param int $number_of_people The number of people that the booking consists of.
     *
     * @return $this
     */
    public function setNumberOfPeople($number_of_people)
    {
        $this->container['number_of_people'] = $number_of_people;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name The name of the company of the person making the reservation.
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The gender of the person making the reservation. Values: MALE, FEMALE, FAMILY, NONE.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name The first name of the person making the reservation.
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name The last name of the person making the reservation.
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string $telephone The telephone number of the person making the reservation.
     *
     * @return $this
     */
    public function setTelephone($telephone)
    {
        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email address of the person making the reservation.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments The comments/remarks of the person making the reservation.
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets culture
     *
     * @return string
     */
    public function getCulture()
    {
        return $this->container['culture'];
    }

    /**
     * Sets culture
     *
     * @param string $culture The two letter ISO culture the booking was created in. Leave null for default (en).
     *
     * @return $this
     */
    public function setCulture($culture)
    {
        $this->container['culture'] = $culture;

        return $this;
    }

    /**
     * Gets company
     *
     * @return bool
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param bool $company {true} if this booking was created for a company; otherwise, {false}.
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
