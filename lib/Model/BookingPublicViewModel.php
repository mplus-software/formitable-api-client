<?php
/**
 * BookingPublicViewModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Formitable Api v1.2
 *
 * New in this version: <ul><li>Added Get Single restaurant operation.</li><li>Verify availability for a datetime / partysize.</li><li>Select tables with create and update booking.</li><li>Get tables and areas by the POS identifiers</li></ul>
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BookingPublicViewModel Class Doc Comment
 *
 * @category Class
 * @description Information about a booking
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BookingPublicViewModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BookingPublicViewModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uid' => 'string',
'created' => '\DateTime',
'booking_date_time' => '\DateTime',
'booking_duration' => 'int',
'check_in_date_time' => '\DateTime',
'number_of_people' => 'int',
'company_name' => 'string',
'title' => 'string',
'first_name' => 'string',
'last_name' => 'string',
'telephone' => 'string',
'email' => 'string',
'comments' => 'string',
'culture' => 'string',
'company' => 'bool',
'newsletter' => 'bool',
'status' => 'string',
'color' => 'string',
'pre_paid_amount' => 'double',
'source' => 'string',
'option_expires' => '\DateTime',
'tickets' => '\Swagger\Client\Model\TicketPublicViewModel[]',
'payments' => '\Swagger\Client\Model\OrderPaymentPublicViewModel[]',
'tables' => '\Swagger\Client\Model\TableListViewModel[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'uid' => null,
'created' => 'date-time',
'booking_date_time' => 'date-time',
'booking_duration' => 'int32',
'check_in_date_time' => 'date-time',
'number_of_people' => 'int32',
'company_name' => null,
'title' => null,
'first_name' => null,
'last_name' => null,
'telephone' => null,
'email' => null,
'comments' => null,
'culture' => null,
'company' => null,
'newsletter' => null,
'status' => null,
'color' => null,
'pre_paid_amount' => 'double',
'source' => null,
'option_expires' => 'date-time',
'tickets' => null,
'payments' => null,
'tables' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uid' => 'uid',
'created' => 'created',
'booking_date_time' => 'bookingDateTime',
'booking_duration' => 'bookingDuration',
'check_in_date_time' => 'checkInDateTime',
'number_of_people' => 'numberOfPeople',
'company_name' => 'companyName',
'title' => 'title',
'first_name' => 'firstName',
'last_name' => 'lastName',
'telephone' => 'telephone',
'email' => 'email',
'comments' => 'comments',
'culture' => 'culture',
'company' => 'company',
'newsletter' => 'newsletter',
'status' => 'status',
'color' => 'color',
'pre_paid_amount' => 'prePaidAmount',
'source' => 'source',
'option_expires' => 'optionExpires',
'tickets' => 'tickets',
'payments' => 'payments',
'tables' => 'tables'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uid' => 'setUid',
'created' => 'setCreated',
'booking_date_time' => 'setBookingDateTime',
'booking_duration' => 'setBookingDuration',
'check_in_date_time' => 'setCheckInDateTime',
'number_of_people' => 'setNumberOfPeople',
'company_name' => 'setCompanyName',
'title' => 'setTitle',
'first_name' => 'setFirstName',
'last_name' => 'setLastName',
'telephone' => 'setTelephone',
'email' => 'setEmail',
'comments' => 'setComments',
'culture' => 'setCulture',
'company' => 'setCompany',
'newsletter' => 'setNewsletter',
'status' => 'setStatus',
'color' => 'setColor',
'pre_paid_amount' => 'setPrePaidAmount',
'source' => 'setSource',
'option_expires' => 'setOptionExpires',
'tickets' => 'setTickets',
'payments' => 'setPayments',
'tables' => 'setTables'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uid' => 'getUid',
'created' => 'getCreated',
'booking_date_time' => 'getBookingDateTime',
'booking_duration' => 'getBookingDuration',
'check_in_date_time' => 'getCheckInDateTime',
'number_of_people' => 'getNumberOfPeople',
'company_name' => 'getCompanyName',
'title' => 'getTitle',
'first_name' => 'getFirstName',
'last_name' => 'getLastName',
'telephone' => 'getTelephone',
'email' => 'getEmail',
'comments' => 'getComments',
'culture' => 'getCulture',
'company' => 'getCompany',
'newsletter' => 'getNewsletter',
'status' => 'getStatus',
'color' => 'getColor',
'pre_paid_amount' => 'getPrePaidAmount',
'source' => 'getSource',
'option_expires' => 'getOptionExpires',
'tickets' => 'getTickets',
'payments' => 'getPayments',
'tables' => 'getTables'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['booking_date_time'] = isset($data['booking_date_time']) ? $data['booking_date_time'] : null;
        $this->container['booking_duration'] = isset($data['booking_duration']) ? $data['booking_duration'] : null;
        $this->container['check_in_date_time'] = isset($data['check_in_date_time']) ? $data['check_in_date_time'] : null;
        $this->container['number_of_people'] = isset($data['number_of_people']) ? $data['number_of_people'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['culture'] = isset($data['culture']) ? $data['culture'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['newsletter'] = isset($data['newsletter']) ? $data['newsletter'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['pre_paid_amount'] = isset($data['pre_paid_amount']) ? $data['pre_paid_amount'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['option_expires'] = isset($data['option_expires']) ? $data['option_expires'] : null;
        $this->container['tickets'] = isset($data['tickets']) ? $data['tickets'] : null;
        $this->container['payments'] = isset($data['payments']) ? $data['payments'] : null;
        $this->container['tables'] = isset($data['tables']) ? $data['tables'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uid
     *
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param string $uid The unique identifier of the booking.
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The date and time the booking was created in the timezone of the restaurant.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets booking_date_time
     *
     * @return \DateTime
     */
    public function getBookingDateTime()
    {
        return $this->container['booking_date_time'];
    }

    /**
     * Sets booking_date_time
     *
     * @param \DateTime $booking_date_time The date and time of the booking in the timezone of the restaurant.
     *
     * @return $this
     */
    public function setBookingDateTime($booking_date_time)
    {
        $this->container['booking_date_time'] = $booking_date_time;

        return $this;
    }

    /**
     * Gets booking_duration
     *
     * @return int
     */
    public function getBookingDuration()
    {
        return $this->container['booking_duration'];
    }

    /**
     * Sets booking_duration
     *
     * @param int $booking_duration The duration of the booking in minutes.
     *
     * @return $this
     */
    public function setBookingDuration($booking_duration)
    {
        $this->container['booking_duration'] = $booking_duration;

        return $this;
    }

    /**
     * Gets check_in_date_time
     *
     * @return \DateTime
     */
    public function getCheckInDateTime()
    {
        return $this->container['check_in_date_time'];
    }

    /**
     * Sets check_in_date_time
     *
     * @param \DateTime $check_in_date_time The date and time the guest has checked in in the timezone of the restaurant.
     *
     * @return $this
     */
    public function setCheckInDateTime($check_in_date_time)
    {
        $this->container['check_in_date_time'] = $check_in_date_time;

        return $this;
    }

    /**
     * Gets number_of_people
     *
     * @return int
     */
    public function getNumberOfPeople()
    {
        return $this->container['number_of_people'];
    }

    /**
     * Sets number_of_people
     *
     * @param int $number_of_people The number of people that the booking consists of.
     *
     * @return $this
     */
    public function setNumberOfPeople($number_of_people)
    {
        $this->container['number_of_people'] = $number_of_people;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name The name of the company of the person making the reservation.
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The gender of the person making the reservation. Values: MALE, FEMALE, FAMILY, NONE.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name The first name of the person making the reservation.
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name The last name of the person making the reservation.
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string $telephone The telephone number of the person making the reservation.
     *
     * @return $this
     */
    public function setTelephone($telephone)
    {
        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email address of the person making the reservation.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments The comments/remarks of the person making the reservation.
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets culture
     *
     * @return string
     */
    public function getCulture()
    {
        return $this->container['culture'];
    }

    /**
     * Sets culture
     *
     * @param string $culture The two letter ISO culture the booking was created in.
     *
     * @return $this
     */
    public function setCulture($culture)
    {
        $this->container['culture'] = $culture;

        return $this;
    }

    /**
     * Gets company
     *
     * @return bool
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param bool $company {true} if this booking was created for a company; otherwise, {false}.
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets newsletter
     *
     * @return bool
     */
    public function getNewsletter()
    {
        return $this->container['newsletter'];
    }

    /**
     * Sets newsletter
     *
     * @param bool $newsletter {true} if user has accepted marketing updates from restaurant; otherwise, {false}.
     *
     * @return $this
     */
    public function setNewsletter($newsletter)
    {
        $this->container['newsletter'] = $newsletter;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the booking. Values: CREATED, ACCEPTED, CANCELLED, FAILED, EXPIRED
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color The color for this booking, only visible for the restaurant.
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets pre_paid_amount
     *
     * @return double
     */
    public function getPrePaidAmount()
    {
        return $this->container['pre_paid_amount'];
    }

    /**
     * Sets pre_paid_amount
     *
     * @param double $pre_paid_amount The amount that was prepaid for ticket bookings.
     *
     * @return $this
     */
    public function setPrePaidAmount($pre_paid_amount)
    {
        $this->container['pre_paid_amount'] = $pre_paid_amount;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source The source of the reservation.
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets option_expires
     *
     * @return \DateTime
     */
    public function getOptionExpires()
    {
        return $this->container['option_expires'];
    }

    /**
     * Sets option_expires
     *
     * @param \DateTime $option_expires If the booking is an option, this property indicates when the option expires. A booking must also have status CREATED to still be an option.
     *
     * @return $this
     */
    public function setOptionExpires($option_expires)
    {
        $this->container['option_expires'] = $option_expires;

        return $this;
    }

    /**
     * Gets tickets
     *
     * @return \Swagger\Client\Model\TicketPublicViewModel[]
     */
    public function getTickets()
    {
        return $this->container['tickets'];
    }

    /**
     * Sets tickets
     *
     * @param \Swagger\Client\Model\TicketPublicViewModel[] $tickets The list of tickets that have been (pre)paid for this booking.
     *
     * @return $this
     */
    public function setTickets($tickets)
    {
        $this->container['tickets'] = $tickets;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \Swagger\Client\Model\OrderPaymentPublicViewModel[]
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \Swagger\Client\Model\OrderPaymentPublicViewModel[] $payments payments
     *
     * @return $this
     */
    public function setPayments($payments)
    {
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets tables
     *
     * @return \Swagger\Client\Model\TableListViewModel[]
     */
    public function getTables()
    {
        return $this->container['tables'];
    }

    /**
     * Sets tables
     *
     * @param \Swagger\Client\Model\TableListViewModel[] $tables The list of tables that are assigned to this booking.
     *
     * @return $this
     */
    public function setTables($tables)
    {
        $this->container['tables'] = $tables;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
