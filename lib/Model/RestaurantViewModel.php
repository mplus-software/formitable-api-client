<?php
/**
 * RestaurantViewModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Formitable Api v1.2
 *
 * New in this version: <ul><li>Added Get Single restaurant operation.</li><li>Verify availability for a datetime / partysize.</li><li>Select tables with create and update booking.</li><li>Get tables and areas by the POS identifiers</li></ul>
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.16
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RestaurantViewModel Class Doc Comment
 *
 * @category Class
 * @description Provides information about the restaurant.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RestaurantViewModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RestaurantViewModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uid' => 'string',
'color' => 'string',
'logo' => 'string',
'name' => 'string',
'street_address' => 'string',
'zipcode' => 'string',
'city' => 'string',
'neighbourhood' => 'string',
'province' => 'string',
'longitude' => 'double',
'latitude' => 'double',
'country' => 'string',
'country_code' => 'string',
'timezone' => 'string',
'email' => 'string',
'website' => 'string',
'telephone' => 'string',
'instagram' => 'string',
'facebook' => 'string',
'foursquare' => 'string',
'google' => 'string',
'twitter' => 'string',
'min_regular_booking' => 'int',
'max_regular_booking' => 'int',
'min_seating' => 'int',
'max_seating' => 'int',
'group_booking_enabled' => 'bool',
'max_group_booking' => 'int',
'min_booking_size' => 'int',
'max_booking_size' => 'int',
'create_policy' => 'string',
'change_policy' => 'string',
'cancel_policy' => 'string',
'start_culture' => 'string',
'images' => 'string[]',
'description' => 'string',
'descriptions' => 'map[string,string]',
'from_the_venue' => 'string',
'why_we_like_it' => 'string',
'cuisine_type' => 'string',
'cuisine_detail' => 'string',
'restaurant_group_name' => 'string',
'price_range' => 'int',
'style' => 'string',
'average_amount_per_person' => 'double',
'menu' => 'string[]',
'max_guests_per_slot' => 'int',
'restaurant_features' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'uid' => null,
'color' => null,
'logo' => null,
'name' => null,
'street_address' => null,
'zipcode' => null,
'city' => null,
'neighbourhood' => null,
'province' => null,
'longitude' => 'double',
'latitude' => 'double',
'country' => null,
'country_code' => null,
'timezone' => null,
'email' => null,
'website' => null,
'telephone' => null,
'instagram' => null,
'facebook' => null,
'foursquare' => null,
'google' => null,
'twitter' => null,
'min_regular_booking' => 'int32',
'max_regular_booking' => 'int32',
'min_seating' => 'int32',
'max_seating' => 'int32',
'group_booking_enabled' => null,
'max_group_booking' => 'int32',
'min_booking_size' => 'int32',
'max_booking_size' => 'int32',
'create_policy' => null,
'change_policy' => null,
'cancel_policy' => null,
'start_culture' => null,
'images' => null,
'description' => null,
'descriptions' => null,
'from_the_venue' => null,
'why_we_like_it' => null,
'cuisine_type' => null,
'cuisine_detail' => null,
'restaurant_group_name' => null,
'price_range' => 'int32',
'style' => null,
'average_amount_per_person' => 'double',
'menu' => null,
'max_guests_per_slot' => 'int32',
'restaurant_features' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uid' => 'uid',
'color' => 'color',
'logo' => 'logo',
'name' => 'name',
'street_address' => 'streetAddress',
'zipcode' => 'zipcode',
'city' => 'city',
'neighbourhood' => 'neighbourhood',
'province' => 'province',
'longitude' => 'longitude',
'latitude' => 'latitude',
'country' => 'country',
'country_code' => 'countryCode',
'timezone' => 'timezone',
'email' => 'email',
'website' => 'website',
'telephone' => 'telephone',
'instagram' => 'instagram',
'facebook' => 'facebook',
'foursquare' => 'foursquare',
'google' => 'google',
'twitter' => 'twitter',
'min_regular_booking' => 'minRegularBooking',
'max_regular_booking' => 'maxRegularBooking',
'min_seating' => 'minSeating',
'max_seating' => 'maxSeating',
'group_booking_enabled' => 'groupBookingEnabled',
'max_group_booking' => 'maxGroupBooking',
'min_booking_size' => 'minBookingSize',
'max_booking_size' => 'maxBookingSize',
'create_policy' => 'createPolicy',
'change_policy' => 'changePolicy',
'cancel_policy' => 'cancelPolicy',
'start_culture' => 'startCulture',
'images' => 'images',
'description' => 'description',
'descriptions' => 'descriptions',
'from_the_venue' => 'fromTheVenue',
'why_we_like_it' => 'whyWeLikeIt',
'cuisine_type' => 'cuisineType',
'cuisine_detail' => 'cuisineDetail',
'restaurant_group_name' => 'restaurantGroupName',
'price_range' => 'priceRange',
'style' => 'style',
'average_amount_per_person' => 'averageAmountPerPerson',
'menu' => 'menu',
'max_guests_per_slot' => 'maxGuestsPerSlot',
'restaurant_features' => 'restaurantFeatures'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uid' => 'setUid',
'color' => 'setColor',
'logo' => 'setLogo',
'name' => 'setName',
'street_address' => 'setStreetAddress',
'zipcode' => 'setZipcode',
'city' => 'setCity',
'neighbourhood' => 'setNeighbourhood',
'province' => 'setProvince',
'longitude' => 'setLongitude',
'latitude' => 'setLatitude',
'country' => 'setCountry',
'country_code' => 'setCountryCode',
'timezone' => 'setTimezone',
'email' => 'setEmail',
'website' => 'setWebsite',
'telephone' => 'setTelephone',
'instagram' => 'setInstagram',
'facebook' => 'setFacebook',
'foursquare' => 'setFoursquare',
'google' => 'setGoogle',
'twitter' => 'setTwitter',
'min_regular_booking' => 'setMinRegularBooking',
'max_regular_booking' => 'setMaxRegularBooking',
'min_seating' => 'setMinSeating',
'max_seating' => 'setMaxSeating',
'group_booking_enabled' => 'setGroupBookingEnabled',
'max_group_booking' => 'setMaxGroupBooking',
'min_booking_size' => 'setMinBookingSize',
'max_booking_size' => 'setMaxBookingSize',
'create_policy' => 'setCreatePolicy',
'change_policy' => 'setChangePolicy',
'cancel_policy' => 'setCancelPolicy',
'start_culture' => 'setStartCulture',
'images' => 'setImages',
'description' => 'setDescription',
'descriptions' => 'setDescriptions',
'from_the_venue' => 'setFromTheVenue',
'why_we_like_it' => 'setWhyWeLikeIt',
'cuisine_type' => 'setCuisineType',
'cuisine_detail' => 'setCuisineDetail',
'restaurant_group_name' => 'setRestaurantGroupName',
'price_range' => 'setPriceRange',
'style' => 'setStyle',
'average_amount_per_person' => 'setAverageAmountPerPerson',
'menu' => 'setMenu',
'max_guests_per_slot' => 'setMaxGuestsPerSlot',
'restaurant_features' => 'setRestaurantFeatures'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uid' => 'getUid',
'color' => 'getColor',
'logo' => 'getLogo',
'name' => 'getName',
'street_address' => 'getStreetAddress',
'zipcode' => 'getZipcode',
'city' => 'getCity',
'neighbourhood' => 'getNeighbourhood',
'province' => 'getProvince',
'longitude' => 'getLongitude',
'latitude' => 'getLatitude',
'country' => 'getCountry',
'country_code' => 'getCountryCode',
'timezone' => 'getTimezone',
'email' => 'getEmail',
'website' => 'getWebsite',
'telephone' => 'getTelephone',
'instagram' => 'getInstagram',
'facebook' => 'getFacebook',
'foursquare' => 'getFoursquare',
'google' => 'getGoogle',
'twitter' => 'getTwitter',
'min_regular_booking' => 'getMinRegularBooking',
'max_regular_booking' => 'getMaxRegularBooking',
'min_seating' => 'getMinSeating',
'max_seating' => 'getMaxSeating',
'group_booking_enabled' => 'getGroupBookingEnabled',
'max_group_booking' => 'getMaxGroupBooking',
'min_booking_size' => 'getMinBookingSize',
'max_booking_size' => 'getMaxBookingSize',
'create_policy' => 'getCreatePolicy',
'change_policy' => 'getChangePolicy',
'cancel_policy' => 'getCancelPolicy',
'start_culture' => 'getStartCulture',
'images' => 'getImages',
'description' => 'getDescription',
'descriptions' => 'getDescriptions',
'from_the_venue' => 'getFromTheVenue',
'why_we_like_it' => 'getWhyWeLikeIt',
'cuisine_type' => 'getCuisineType',
'cuisine_detail' => 'getCuisineDetail',
'restaurant_group_name' => 'getRestaurantGroupName',
'price_range' => 'getPriceRange',
'style' => 'getStyle',
'average_amount_per_person' => 'getAverageAmountPerPerson',
'menu' => 'getMenu',
'max_guests_per_slot' => 'getMaxGuestsPerSlot',
'restaurant_features' => 'getRestaurantFeatures'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['street_address'] = isset($data['street_address']) ? $data['street_address'] : null;
        $this->container['zipcode'] = isset($data['zipcode']) ? $data['zipcode'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['neighbourhood'] = isset($data['neighbourhood']) ? $data['neighbourhood'] : null;
        $this->container['province'] = isset($data['province']) ? $data['province'] : null;
        $this->container['longitude'] = isset($data['longitude']) ? $data['longitude'] : null;
        $this->container['latitude'] = isset($data['latitude']) ? $data['latitude'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['instagram'] = isset($data['instagram']) ? $data['instagram'] : null;
        $this->container['facebook'] = isset($data['facebook']) ? $data['facebook'] : null;
        $this->container['foursquare'] = isset($data['foursquare']) ? $data['foursquare'] : null;
        $this->container['google'] = isset($data['google']) ? $data['google'] : null;
        $this->container['twitter'] = isset($data['twitter']) ? $data['twitter'] : null;
        $this->container['min_regular_booking'] = isset($data['min_regular_booking']) ? $data['min_regular_booking'] : null;
        $this->container['max_regular_booking'] = isset($data['max_regular_booking']) ? $data['max_regular_booking'] : null;
        $this->container['min_seating'] = isset($data['min_seating']) ? $data['min_seating'] : null;
        $this->container['max_seating'] = isset($data['max_seating']) ? $data['max_seating'] : null;
        $this->container['group_booking_enabled'] = isset($data['group_booking_enabled']) ? $data['group_booking_enabled'] : null;
        $this->container['max_group_booking'] = isset($data['max_group_booking']) ? $data['max_group_booking'] : null;
        $this->container['min_booking_size'] = isset($data['min_booking_size']) ? $data['min_booking_size'] : null;
        $this->container['max_booking_size'] = isset($data['max_booking_size']) ? $data['max_booking_size'] : null;
        $this->container['create_policy'] = isset($data['create_policy']) ? $data['create_policy'] : null;
        $this->container['change_policy'] = isset($data['change_policy']) ? $data['change_policy'] : null;
        $this->container['cancel_policy'] = isset($data['cancel_policy']) ? $data['cancel_policy'] : null;
        $this->container['start_culture'] = isset($data['start_culture']) ? $data['start_culture'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['descriptions'] = isset($data['descriptions']) ? $data['descriptions'] : null;
        $this->container['from_the_venue'] = isset($data['from_the_venue']) ? $data['from_the_venue'] : null;
        $this->container['why_we_like_it'] = isset($data['why_we_like_it']) ? $data['why_we_like_it'] : null;
        $this->container['cuisine_type'] = isset($data['cuisine_type']) ? $data['cuisine_type'] : null;
        $this->container['cuisine_detail'] = isset($data['cuisine_detail']) ? $data['cuisine_detail'] : null;
        $this->container['restaurant_group_name'] = isset($data['restaurant_group_name']) ? $data['restaurant_group_name'] : null;
        $this->container['price_range'] = isset($data['price_range']) ? $data['price_range'] : null;
        $this->container['style'] = isset($data['style']) ? $data['style'] : null;
        $this->container['average_amount_per_person'] = isset($data['average_amount_per_person']) ? $data['average_amount_per_person'] : null;
        $this->container['menu'] = isset($data['menu']) ? $data['menu'] : null;
        $this->container['max_guests_per_slot'] = isset($data['max_guests_per_slot']) ? $data['max_guests_per_slot'] : null;
        $this->container['restaurant_features'] = isset($data['restaurant_features']) ? $data['restaurant_features'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uid
     *
     * @return string
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param string $uid The unique identifier of the restaurant. You use this identifier to address other api methods specific to the restaurant.
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color The primary color of the resataurant in hexidecimal format. (Example: #148ACF)
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string $logo The logo of the resataurant.
     *
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the restaurant.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets street_address
     *
     * @return string
     */
    public function getStreetAddress()
    {
        return $this->container['street_address'];
    }

    /**
     * Sets street_address
     *
     * @param string $street_address The streetaddress including housenumber.
     *
     * @return $this
     */
    public function setStreetAddress($street_address)
    {
        $this->container['street_address'] = $street_address;

        return $this;
    }

    /**
     * Gets zipcode
     *
     * @return string
     */
    public function getZipcode()
    {
        return $this->container['zipcode'];
    }

    /**
     * Sets zipcode
     *
     * @param string $zipcode The zipcode.
     *
     * @return $this
     */
    public function setZipcode($zipcode)
    {
        $this->container['zipcode'] = $zipcode;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The city.
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets neighbourhood
     *
     * @return string
     */
    public function getNeighbourhood()
    {
        return $this->container['neighbourhood'];
    }

    /**
     * Sets neighbourhood
     *
     * @param string $neighbourhood Neighbourhood
     *
     * @return $this
     */
    public function setNeighbourhood($neighbourhood)
    {
        $this->container['neighbourhood'] = $neighbourhood;

        return $this;
    }

    /**
     * Gets province
     *
     * @return string
     */
    public function getProvince()
    {
        return $this->container['province'];
    }

    /**
     * Sets province
     *
     * @param string $province Province or region of the restaurant
     *
     * @return $this
     */
    public function setProvince($province)
    {
        $this->container['province'] = $province;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return double
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param double $longitude longitude
     *
     * @return $this
     */
    public function setLongitude($longitude)
    {
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return double
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param double $latitude latitude
     *
     * @return $this
     */
    public function setLatitude($latitude)
    {
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country The country.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code The two letter ISO country code.
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone The timezone in Windows format. Amsterdam will result in 'W. Europe Standard Time' for example.
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The main e-mail address.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string $website The public website of the restaurant.
     *
     * @return $this
     */
    public function setWebsite($website)
    {
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string $telephone The public telephone number.
     *
     * @return $this
     */
    public function setTelephone($telephone)
    {
        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets instagram
     *
     * @return string
     */
    public function getInstagram()
    {
        return $this->container['instagram'];
    }

    /**
     * Sets instagram
     *
     * @param string $instagram The instagram id.
     *
     * @return $this
     */
    public function setInstagram($instagram)
    {
        $this->container['instagram'] = $instagram;

        return $this;
    }

    /**
     * Gets facebook
     *
     * @return string
     */
    public function getFacebook()
    {
        return $this->container['facebook'];
    }

    /**
     * Sets facebook
     *
     * @param string $facebook The facebook id.
     *
     * @return $this
     */
    public function setFacebook($facebook)
    {
        $this->container['facebook'] = $facebook;

        return $this;
    }

    /**
     * Gets foursquare
     *
     * @return string
     */
    public function getFoursquare()
    {
        return $this->container['foursquare'];
    }

    /**
     * Sets foursquare
     *
     * @param string $foursquare The foursquare id.
     *
     * @return $this
     */
    public function setFoursquare($foursquare)
    {
        $this->container['foursquare'] = $foursquare;

        return $this;
    }

    /**
     * Gets google
     *
     * @return string
     */
    public function getGoogle()
    {
        return $this->container['google'];
    }

    /**
     * Sets google
     *
     * @param string $google The google id.
     *
     * @return $this
     */
    public function setGoogle($google)
    {
        $this->container['google'] = $google;

        return $this;
    }

    /**
     * Gets twitter
     *
     * @return string
     */
    public function getTwitter()
    {
        return $this->container['twitter'];
    }

    /**
     * Sets twitter
     *
     * @param string $twitter The twitter name.
     *
     * @return $this
     */
    public function setTwitter($twitter)
    {
        $this->container['twitter'] = $twitter;

        return $this;
    }

    /**
     * Gets min_regular_booking
     *
     * @return int
     */
    public function getMinRegularBooking()
    {
        return $this->container['min_regular_booking'];
    }

    /**
     * Sets min_regular_booking
     *
     * @param int $min_regular_booking Minimum number of persons that a booking can consist of.
     *
     * @return $this
     */
    public function setMinRegularBooking($min_regular_booking)
    {
        $this->container['min_regular_booking'] = $min_regular_booking;

        return $this;
    }

    /**
     * Gets max_regular_booking
     *
     * @return int
     */
    public function getMaxRegularBooking()
    {
        return $this->container['max_regular_booking'];
    }

    /**
     * Sets max_regular_booking
     *
     * @param int $max_regular_booking Maximum number of persons that a regular booking can consist of.
     *
     * @return $this
     */
    public function setMaxRegularBooking($max_regular_booking)
    {
        $this->container['max_regular_booking'] = $max_regular_booking;

        return $this;
    }

    /**
     * Gets min_seating
     *
     * @return int
     */
    public function getMinSeating()
    {
        return $this->container['min_seating'];
    }

    /**
     * Sets min_seating
     *
     * @param int $min_seating Minimum number of persons that can be seated calculated from all table combinations.
     *
     * @return $this
     */
    public function setMinSeating($min_seating)
    {
        $this->container['min_seating'] = $min_seating;

        return $this;
    }

    /**
     * Gets max_seating
     *
     * @return int
     */
    public function getMaxSeating()
    {
        return $this->container['max_seating'];
    }

    /**
     * Sets max_seating
     *
     * @param int $max_seating Maximum number of persons that can be seated calculated from all table combinations.
     *
     * @return $this
     */
    public function setMaxSeating($max_seating)
    {
        $this->container['max_seating'] = $max_seating;

        return $this;
    }

    /**
     * Gets group_booking_enabled
     *
     * @return bool
     */
    public function getGroupBookingEnabled()
    {
        return $this->container['group_booking_enabled'];
    }

    /**
     * Sets group_booking_enabled
     *
     * @param bool $group_booking_enabled {true} if group bookings are enabled; otherwise, {false}.
     *
     * @return $this
     */
    public function setGroupBookingEnabled($group_booking_enabled)
    {
        $this->container['group_booking_enabled'] = $group_booking_enabled;

        return $this;
    }

    /**
     * Gets max_group_booking
     *
     * @return int
     */
    public function getMaxGroupBooking()
    {
        return $this->container['max_group_booking'];
    }

    /**
     * Sets max_group_booking
     *
     * @param int $max_group_booking The maximum number of persons that a group booking can consist of.
     *
     * @return $this
     */
    public function setMaxGroupBooking($max_group_booking)
    {
        $this->container['max_group_booking'] = $max_group_booking;

        return $this;
    }

    /**
     * Gets min_booking_size
     *
     * @return int
     */
    public function getMinBookingSize()
    {
        return $this->container['min_booking_size'];
    }

    /**
     * Sets min_booking_size
     *
     * @param int $min_booking_size The minimum booking size.
     *
     * @return $this
     */
    public function setMinBookingSize($min_booking_size)
    {
        $this->container['min_booking_size'] = $min_booking_size;

        return $this;
    }

    /**
     * Gets max_booking_size
     *
     * @return int
     */
    public function getMaxBookingSize()
    {
        return $this->container['max_booking_size'];
    }

    /**
     * Sets max_booking_size
     *
     * @param int $max_booking_size The maximum booking size.
     *
     * @return $this
     */
    public function setMaxBookingSize($max_booking_size)
    {
        $this->container['max_booking_size'] = $max_booking_size;

        return $this;
    }

    /**
     * Gets create_policy
     *
     * @return string
     */
    public function getCreatePolicy()
    {
        return $this->container['create_policy'];
    }

    /**
     * Sets create_policy
     *
     * @param string $create_policy The minimum amount of time a booking must be made in advance of the start time of the reservation.  Format: [0-9][h/d/w] h:hours, d: days, w: weeks.  Example: 3h -&gt; The earliest reservation time for a booking made at 16:00 is 19:00.
     *
     * @return $this
     */
    public function setCreatePolicy($create_policy)
    {
        $this->container['create_policy'] = $create_policy;

        return $this;
    }

    /**
     * Gets change_policy
     *
     * @return string
     */
    public function getChangePolicy()
    {
        return $this->container['change_policy'];
    }

    /**
     * Sets change_policy
     *
     * @param string $change_policy The maximum allowed time a booking can be changed before the start time of the reservation.  Format: [0-9][h/d/w] h:hours, d: days, w: weeks.  Example: 3h -&gt; The latest possible time to change a reservation for 20:00 is 17:00.
     *
     * @return $this
     */
    public function setChangePolicy($change_policy)
    {
        $this->container['change_policy'] = $change_policy;

        return $this;
    }

    /**
     * Gets cancel_policy
     *
     * @return string
     */
    public function getCancelPolicy()
    {
        return $this->container['cancel_policy'];
    }

    /**
     * Sets cancel_policy
     *
     * @param string $cancel_policy The maximum allowed time a booking can be cancelled before the start time of the reservation.  Format: [0-9][h/d/w] h:hours, d: days, w: weeks.  Example: 3h -&gt; The latest possible time to cancel a reservation for 19:00 is 16:00.
     *
     * @return $this
     */
    public function setCancelPolicy($cancel_policy)
    {
        $this->container['cancel_policy'] = $cancel_policy;

        return $this;
    }

    /**
     * Gets start_culture
     *
     * @return string
     */
    public function getStartCulture()
    {
        return $this->container['start_culture'];
    }

    /**
     * Sets start_culture
     *
     * @param string $start_culture The standard culture for this restaurant in two letter ISO culture format. Example: 'nl'.
     *
     * @return $this
     */
    public function setStartCulture($start_culture)
    {
        $this->container['start_culture'] = $start_culture;

        return $this;
    }

    /**
     * Gets images
     *
     * @return string[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param string[] $images A list containing all the images for the restaurant.
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Creates context around the restaurant – who the players are, what they’re known for, the origin of the concept, specialty dishes, accolades – written in the third person (not using first person “we” or “us”).
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets descriptions
     *
     * @return map[string,string]
     */
    public function getDescriptions()
    {
        return $this->container['descriptions'];
    }

    /**
     * Sets descriptions
     *
     * @param map[string,string] $descriptions Contains all the localized values of the Description. (English and Dutch)
     *
     * @return $this
     */
    public function setDescriptions($descriptions)
    {
        $this->container['descriptions'] = $descriptions;

        return $this;
    }

    /**
     * Gets from_the_venue
     *
     * @return string
     */
    public function getFromTheVenue()
    {
        return $this->container['from_the_venue'];
    }

    /**
     * Sets from_the_venue
     *
     * @param string $from_the_venue Essential information pertaining to logistics (think parking/valet, reservation policies, tables of 8 or more contact directly, walk-in seating details).
     *
     * @return $this
     */
    public function setFromTheVenue($from_the_venue)
    {
        $this->container['from_the_venue'] = $from_the_venue;

        return $this;
    }

    /**
     * Gets why_we_like_it
     *
     * @return string
     */
    public function getWhyWeLikeIt()
    {
        return $this->container['why_we_like_it'];
    }

    /**
     * Sets why_we_like_it
     *
     * @param string $why_we_like_it A boiled-down take of the ideal use case for a particular venue, what makes the restaurant special, or any fun facts.
     *
     * @return $this
     */
    public function setWhyWeLikeIt($why_we_like_it)
    {
        $this->container['why_we_like_it'] = $why_we_like_it;

        return $this;
    }

    /**
     * Gets cuisine_type
     *
     * @return string
     */
    public function getCuisineType()
    {
        return $this->container['cuisine_type'];
    }

    /**
     * Sets cuisine_type
     *
     * @param string $cuisine_type The (primary) type of cuisine that is served in this restaurant.
     *
     * @return $this
     */
    public function setCuisineType($cuisine_type)
    {
        $this->container['cuisine_type'] = $cuisine_type;

        return $this;
    }

    /**
     * Gets cuisine_detail
     *
     * @return string
     */
    public function getCuisineDetail()
    {
        return $this->container['cuisine_detail'];
    }

    /**
     * Sets cuisine_detail
     *
     * @param string $cuisine_detail The detail of the cuisine that is served in this restaurant.
     *
     * @return $this
     */
    public function setCuisineDetail($cuisine_detail)
    {
        $this->container['cuisine_detail'] = $cuisine_detail;

        return $this;
    }

    /**
     * Gets restaurant_group_name
     *
     * @return string
     */
    public function getRestaurantGroupName()
    {
        return $this->container['restaurant_group_name'];
    }

    /**
     * Sets restaurant_group_name
     *
     * @param string $restaurant_group_name Name of the group/chain the restaurant belongs to.
     *
     * @return $this
     */
    public function setRestaurantGroupName($restaurant_group_name)
    {
        $this->container['restaurant_group_name'] = $restaurant_group_name;

        return $this;
    }

    /**
     * Gets price_range
     *
     * @return int
     */
    public function getPriceRange()
    {
        return $this->container['price_range'];
    }

    /**
     * Sets price_range
     *
     * @param int $price_range The price range of the restaurant from 1 to 5, for the customers to make comparisons. 1 denoting inexpensive.
     *
     * @return $this
     */
    public function setPriceRange($price_range)
    {
        $this->container['price_range'] = $price_range;

        return $this;
    }

    /**
     * Gets style
     *
     * @return string
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     *
     * @param string $style The (primary) style of the restaurant.
     *
     * @return $this
     */
    public function setStyle($style)
    {
        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets average_amount_per_person
     *
     * @return double
     */
    public function getAverageAmountPerPerson()
    {
        return $this->container['average_amount_per_person'];
    }

    /**
     * Sets average_amount_per_person
     *
     * @param double $average_amount_per_person The average amount of currency to be paid per person for a typical menu.
     *
     * @return $this
     */
    public function setAverageAmountPerPerson($average_amount_per_person)
    {
        $this->container['average_amount_per_person'] = $average_amount_per_person;

        return $this;
    }

    /**
     * Gets menu
     *
     * @return string[]
     */
    public function getMenu()
    {
        return $this->container['menu'];
    }

    /**
     * Sets menu
     *
     * @param string[] $menu A list of menu items to show.
     *
     * @return $this
     */
    public function setMenu($menu)
    {
        $this->container['menu'] = $menu;

        return $this;
    }

    /**
     * Gets max_guests_per_slot
     *
     * @return int
     */
    public function getMaxGuestsPerSlot()
    {
        return $this->container['max_guests_per_slot'];
    }

    /**
     * Sets max_guests_per_slot
     *
     * @param int $max_guests_per_slot The max number of guests allowed per timeslot. Unlimitid is -1
     *
     * @return $this
     */
    public function setMaxGuestsPerSlot($max_guests_per_slot)
    {
        $this->container['max_guests_per_slot'] = $max_guests_per_slot;

        return $this;
    }

    /**
     * Gets restaurant_features
     *
     * @return string[]
     */
    public function getRestaurantFeatures()
    {
        return $this->container['restaurant_features'];
    }

    /**
     * Sets restaurant_features
     *
     * @param string[] $restaurant_features The features that are enabled for the restaurant
     *
     * @return $this
     */
    public function setRestaurantFeatures($restaurant_features)
    {
        $this->container['restaurant_features'] = $restaurant_features;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
