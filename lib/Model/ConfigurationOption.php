<?php
/**
 * ConfigurationOption
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Formitable Api v1.2
 *
 * New in this version: <ul><li>Added Get Single restaurant operation.</li><li>Verify availability for a datetime / partysize.</li><li>Select tables with create and update booking.</li><li>Get tables and areas by the POS identifiers</li></ul>
 *
 * OpenAPI spec version: v1.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.16
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ConfigurationOption Class Doc Comment
 *
 * @category Class
 * @description Contains information about a bookable option. When SpotsOpen &#x3D; 0, this option is full.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConfigurationOption implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConfigurationOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'time' => 'int',
'party_size' => 'int',
'duration' => 'int',
'product_uid' => 'string',
'area_id' => 'int',
'spots_open' => 'int',
'spots_total' => 'int',
'is_squeeze' => 'bool',
'show_end_time' => 'bool',
'booking_window_min' => 'string',
'booking_window_max' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'time' => 'int32',
'party_size' => 'int32',
'duration' => 'int32',
'product_uid' => null,
'area_id' => 'int32',
'spots_open' => 'int32',
'spots_total' => 'int32',
'is_squeeze' => null,
'show_end_time' => null,
'booking_window_min' => null,
'booking_window_max' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'time' => 'time',
'party_size' => 'partySize',
'duration' => 'duration',
'product_uid' => 'productUid',
'area_id' => 'areaId',
'spots_open' => 'spotsOpen',
'spots_total' => 'spotsTotal',
'is_squeeze' => 'isSqueeze',
'show_end_time' => 'showEndTime',
'booking_window_min' => 'bookingWindowMin',
'booking_window_max' => 'bookingWindowMax'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'time' => 'setTime',
'party_size' => 'setPartySize',
'duration' => 'setDuration',
'product_uid' => 'setProductUid',
'area_id' => 'setAreaId',
'spots_open' => 'setSpotsOpen',
'spots_total' => 'setSpotsTotal',
'is_squeeze' => 'setIsSqueeze',
'show_end_time' => 'setShowEndTime',
'booking_window_min' => 'setBookingWindowMin',
'booking_window_max' => 'setBookingWindowMax'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'time' => 'getTime',
'party_size' => 'getPartySize',
'duration' => 'getDuration',
'product_uid' => 'getProductUid',
'area_id' => 'getAreaId',
'spots_open' => 'getSpotsOpen',
'spots_total' => 'getSpotsTotal',
'is_squeeze' => 'getIsSqueeze',
'show_end_time' => 'getShowEndTime',
'booking_window_min' => 'getBookingWindowMin',
'booking_window_max' => 'getBookingWindowMax'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['time'] = isset($data['time']) ? $data['time'] : null;
        $this->container['party_size'] = isset($data['party_size']) ? $data['party_size'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['product_uid'] = isset($data['product_uid']) ? $data['product_uid'] : null;
        $this->container['area_id'] = isset($data['area_id']) ? $data['area_id'] : null;
        $this->container['spots_open'] = isset($data['spots_open']) ? $data['spots_open'] : null;
        $this->container['spots_total'] = isset($data['spots_total']) ? $data['spots_total'] : null;
        $this->container['is_squeeze'] = isset($data['is_squeeze']) ? $data['is_squeeze'] : null;
        $this->container['show_end_time'] = isset($data['show_end_time']) ? $data['show_end_time'] : null;
        $this->container['booking_window_min'] = isset($data['booking_window_min']) ? $data['booking_window_min'] : null;
        $this->container['booking_window_max'] = isset($data['booking_window_max']) ? $data['booking_window_max'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets time
     *
     * @return int
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param int $time Time in minutes from midnight, local restaurant time
     *
     * @return $this
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets party_size
     *
     * @return int
     */
    public function getPartySize()
    {
        return $this->container['party_size'];
    }

    /**
     * Sets party_size
     *
     * @param int $party_size The number of people for which this configuration applies.
     *
     * @return $this
     */
    public function setPartySize($party_size)
    {
        $this->container['party_size'] = $party_size;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int $duration Duration in minutes
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets product_uid
     *
     * @return string
     */
    public function getProductUid()
    {
        return $this->container['product_uid'];
    }

    /**
     * Sets product_uid
     *
     * @param string $product_uid The product that is linked to this option
     *
     * @return $this
     */
    public function setProductUid($product_uid)
    {
        $this->container['product_uid'] = $product_uid;

        return $this;
    }

    /**
     * Gets area_id
     *
     * @return int
     */
    public function getAreaId()
    {
        return $this->container['area_id'];
    }

    /**
     * Sets area_id
     *
     * @param int $area_id The area linked to this option. If null, area is not specified and need not be shown to the guest.
     *
     * @return $this
     */
    public function setAreaId($area_id)
    {
        $this->container['area_id'] = $area_id;

        return $this;
    }

    /**
     * Gets spots_open
     *
     * @return int
     */
    public function getSpotsOpen()
    {
        return $this->container['spots_open'];
    }

    /**
     * Sets spots_open
     *
     * @param int $spots_open The number of spots still available for this time and number of people
     *
     * @return $this
     */
    public function setSpotsOpen($spots_open)
    {
        $this->container['spots_open'] = $spots_open;

        return $this;
    }

    /**
     * Gets spots_total
     *
     * @return int
     */
    public function getSpotsTotal()
    {
        return $this->container['spots_total'];
    }

    /**
     * Sets spots_total
     *
     * @param int $spots_total The total number of spots when the restaurant would be empty.
     *
     * @return $this
     */
    public function setSpotsTotal($spots_total)
    {
        $this->container['spots_total'] = $spots_total;

        return $this;
    }

    /**
     * Gets is_squeeze
     *
     * @return bool
     */
    public function getIsSqueeze()
    {
        return $this->container['is_squeeze'];
    }

    /**
     * Sets is_squeeze
     *
     * @param bool $is_squeeze True when this option is squeezed between other bookings (making the duration shorter than normal); otherwise, false.
     *
     * @return $this
     */
    public function setIsSqueeze($is_squeeze)
    {
        $this->container['is_squeeze'] = $is_squeeze;

        return $this;
    }

    /**
     * Gets show_end_time
     *
     * @return bool
     */
    public function getShowEndTime()
    {
        return $this->container['show_end_time'];
    }

    /**
     * Sets show_end_time
     *
     * @param bool $show_end_time True when the endtime (Time + Duration) should be shown to guests; otherwise, false.
     *
     * @return $this
     */
    public function setShowEndTime($show_end_time)
    {
        $this->container['show_end_time'] = $show_end_time;

        return $this;
    }

    /**
     * Gets booking_window_min
     *
     * @return string
     */
    public function getBookingWindowMin()
    {
        return $this->container['booking_window_min'];
    }

    /**
     * Sets booking_window_min
     *
     * @param string $booking_window_min The minimum amount of time a booking must be made in advance of the start time of the reservation.  Format: [0-9][h/d/w] h:hours, d: days, w: weeks, m:months.  Example: 3h -&gt; A booking for 20:00 can not be booked later than 17:00
     *
     * @return $this
     */
    public function setBookingWindowMin($booking_window_min)
    {
        $this->container['booking_window_min'] = $booking_window_min;

        return $this;
    }

    /**
     * Gets booking_window_max
     *
     * @return string
     */
    public function getBookingWindowMax()
    {
        return $this->container['booking_window_max'];
    }

    /**
     * Sets booking_window_max
     *
     * @param string $booking_window_max The maximum amount of time a booking can be made in advance of the start time of the reservation.  Format: [0-9][h/d/w] h:hours, d: days, w: weeks, m:months.  Example: 10d -&gt;  A booking for april 20 can not be booked earlier than april 10.
     *
     * @return $this
     */
    public function setBookingWindowMax($booking_window_max)
    {
        $this->container['booking_window_max'] = $booking_window_max;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
